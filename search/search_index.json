{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Workshop Home \u00b6 For the source code for the workshop visit the ASP.NET 7 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 7? Ask me about doing a workshop. My email is cwoodruff@live.com .","title":"Home"},{"location":"#workshop-home","text":"For the source code for the workshop visit the ASP.NET 7 Web API Workshop GitHub repo. Interested in learning about designing, architecting and developing Web APIs using ASP.NET 7? Ask me about doing a workshop. My email is cwoodruff@live.com .","title":"Workshop Home"},{"location":"about/","text":"About the Workshop \u00b6","title":"About"},{"location":"about/#about-the-workshop","text":"","title":"About the Workshop"},{"location":"installing-aspnet-7/","text":"Installing .NET 7 and ASP.NET 7 \u00b6 This page will instruct you how to download and install the .NET 7 SDK that includes ASP.NET 7 Web API. First, download the .NET SDK on your computer. Installing the SDK for .NET 7 \u00b6 Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 7 has been installed: dotnet --list-sdks You see the .NET 7 SDK version as one of the outputs: 7.0.XXX Congratulations! You're ready to create your first ASP.NET Web API. Next steps \u00b6 If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Installing ASP.NET 7"},{"location":"installing-aspnet-7/#installing-net-7-and-aspnet-7","text":"This page will instruct you how to download and install the .NET 7 SDK that includes ASP.NET 7 Web API. First, download the .NET SDK on your computer.","title":"Installing .NET 7 and ASP.NET 7"},{"location":"installing-aspnet-7/#installing-the-sdk-for-net-7","text":"Next install the .NET SDK on your computer. Next, open a terminal such as PowerShell , Command Prompt , or bash . Enter the following dotnet commands to verify that .NET 7 has been installed: dotnet --list-sdks You see the .NET 7 SDK version as one of the outputs: 7.0.XXX Congratulations! You're ready to create your first ASP.NET Web API.","title":"Installing the SDK for .NET 7"},{"location":"installing-aspnet-7/#next-steps","text":"If you need some introduction to developing .NET applications, you can following the step-by-step tutorial or by watching .NET 101 videos on YouTube.","title":"Next steps"},{"location":"installing-mssql-docker/","text":"Installing and Setting Up SQL Server 2019 in Docker \u00b6 macOS Linux Windows #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Installing and Setting Up SQL Server 2019 in Docker"},{"location":"installing-mssql-docker/#installing-and-setting-up-sql-server-2019-in-docker","text":"macOS Linux Windows #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Installing and Setting Up SQL Server 2019 in Docker"},{"location":"installing-mssql/","text":"Installing and Setting Up SQL Server 2022 \u00b6 Go to the Try SQL Server 2022 page and download the Developer version. Install locally. Creating the Chinook database in MSSQL 2022 \u00b6 Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2022 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Installing SQL Server"},{"location":"installing-mssql/#installing-and-setting-up-sql-server-2022","text":"Go to the Try SQL Server 2022 page and download the Developer version. Install locally.","title":"Installing and Setting Up SQL Server 2022"},{"location":"installing-mssql/#creating-the-chinook-database-in-mssql-2022","text":"Get the Chinook database for this workshop in the GitHub repo. The file is a BAK backup so we will restore it to where you have MSSQL 2022 installed. It contains all data for the workshop and will be the starting point for the learning. Use SQL Server Management Studio to restore the database.","title":"Creating the Chinook database in MSSQL 2022"},{"location":"installing-postman/","text":"Installing and Setting Up Postman \u00b6 Download and install Postman for labs.","title":"Installing Postman"},{"location":"installing-postman/#installing-and-setting-up-postman","text":"Download and install Postman for labs.","title":"Installing and Setting Up Postman"},{"location":"introduction/","text":"Introduction to the Workshop \u00b6","title":"Introduction"},{"location":"introduction/#introduction-to-the-workshop","text":"","title":"Introduction to the Workshop"},{"location":"required-tech/","text":"Required Technologies for the Workshop \u00b6 Tech Where to download .NET 7 Download SQL Server Download Postman Download","title":"Required Technology"},{"location":"required-tech/#required-technologies-for-the-workshop","text":"Tech Where to download .NET 7 Download SQL Server Download Postman Download","title":"Required Technologies for the Workshop"},{"location":"setting-up-azure-sql/","text":"Creating and Setting up Your Azure Account for Azure SQL \u00b6","title":"Creating and Setting up Your Azure Account for Azure SQL"},{"location":"setting-up-azure-sql/#creating-and-setting-up-your-azure-account-for-azure-sql","text":"","title":"Creating and Setting up Your Azure Account for Azure SQL"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/","text":"Adding Paging to your API Queries \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Using the PATCH HTTP Request in your API Add Microsoft.EntityFrameworkCore NUGET PACKAGE TO DOMAIN PROJECT \u00b6 dotnet add package Microsoft.EntityFrameworkCore ADD PAGEDLIST CLASS TO YOUR DOMAIN PROJECT \u00b6 public class PagedList < T > : List < T > { public int CurrentPage { get ; } public int TotalPages { get ; } public int PageSize { get ; } public int TotalCount { get ; } public bool HasPrevious => CurrentPage > 1 ; public bool HasNext => CurrentPage < TotalPages ; public PagedList ( List < T > items , int count , int pageNumber , int pageSize ) { TotalCount = count ; PageSize = pageSize ; CurrentPage = pageNumber ; TotalPages = ( int ) Math . Ceiling ( count / ( double ) pageSize ); AddRange ( items ); } public PagedList ( PagedList < T > items ) { TotalCount = items . TotalCount ; PageSize = items . PageSize ; CurrentPage = items . CurrentPage ; TotalPages = ( int ) Math . Ceiling ( items . TotalCount / ( double ) items . PageSize ); AddRange ( items ); } public static async Task < PagedList < T >> ToPagedListAsync ( IQueryable < T > source , int pageNumber , int pageSize ) { var count = source . Count (); var items = await source . Skip (( pageNumber - 1 ) * pageSize ). Take ( pageSize ). ToListAsync (); return new PagedList < T > ( items , count , pageNumber , pageSize ); } } UPDATE DATA REPOSITORY INTERFACES IN DOMAIN PROJECT \u00b6 public interface IAlbumRepository : IDisposable { Task < PagedList < Album >> GetAll ( int pageNumber , int pageSize ); Task < Album > GetById ( int id ); Task < PagedList < Album >> GetByArtistId ( int id , int pageNumber , int pageSize ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } UPDATE DATA REPOSITORIES IN DATA PROJECT \u00b6 public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < PagedList < Album >> GetAll ( int pageNumber , int pageSize ) => await PagedList < Album > . ToPagedListAsync ( _context . Set < Album > (). AsNoTrackingWithIdentityResolution (), pageNumber , pageSize ); public async Task < Album > GetById ( int id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if ( ! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if ( ! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < PagedList < Album >> GetByArtistId ( int id , int pageNumber , int pageSize ) => await PagedList < Album > . ToPagedListAsync ( _context . Albums . Where ( a => a . ArtistId == id ) . AsNoTrackingWithIdentityResolution (), pageNumber , pageSize ); } UPDATE ICHINOOKSUPERVISOR IN DOMAIN PROJECT \u00b6 public interface IChinookSupervisor { Task < PagedList < AlbumApiModel >> GetAllAlbum ( int pageNumber , int pageSize ); Task < AlbumApiModel ?> GetAlbumById ( int id ); Task < PagedList < AlbumApiModel >> GetAlbumByArtistId ( int id , int pageNumber , int pageSize ); Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ); Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ); Task < bool > DeleteAlbum ( int id ); Task < PagedList < ArtistApiModel >> GetAllArtist ( int pageNumber , int pageSize ); Task < ArtistApiModel > GetArtistById ( int id ); Task < ArtistApiModel > AddArtist ( ArtistApiModel newArtistApiModel ); Task < bool > UpdateArtist ( ArtistApiModel artistApiModel ); Task < bool > DeleteArtist ( int id ); Task < PagedList < CustomerApiModel >> GetAllCustomer ( int pageNumber , int pageSize ); Task < CustomerApiModel > GetCustomerById ( int id ); Task < PagedList < CustomerApiModel >> GetCustomerBySupportRepId ( int id , int pageNumber , int pageSize ); Task < CustomerApiModel > AddCustomer ( CustomerApiModel newCustomerApiModel ); Task < bool > UpdateCustomer ( CustomerApiModel customerApiModel ); Task < bool > DeleteCustomer ( int id ); Task < PagedList < EmployeeApiModel >> GetAllEmployee ( int pageNumber , int pageSize ); Task < EmployeeApiModel ?> GetEmployeeById ( int id ); Task < EmployeeApiModel ?> GetEmployeeReportsTo ( int id ); Task < EmployeeApiModel > AddEmployee ( EmployeeApiModel newEmployeeApiModel ); Task < bool > UpdateEmployee ( EmployeeApiModel employeeApiModel ); Task < bool > DeleteEmployee ( int id ); Task < IEnumerable < EmployeeApiModel >> GetEmployeeDirectReports ( int id ); Task < IEnumerable < EmployeeApiModel >> GetDirectReports ( int id ); Task < PagedList < GenreApiModel >> GetAllGenre ( int pageNumber , int pageSize ); Task < GenreApiModel ?> GetGenreById ( int id ); Task < GenreApiModel > AddGenre ( GenreApiModel newGenreApiModel ); Task < bool > UpdateGenre ( GenreApiModel genreApiModel ); Task < bool > DeleteGenre ( int id ); Task < PagedList < InvoiceLineApiModel >> GetAllInvoiceLine ( int pageNumber , int pageSize ); Task < InvoiceLineApiModel > GetInvoiceLineById ( int id ); Task < PagedList < InvoiceLineApiModel >> GetInvoiceLineByInvoiceId ( int id , int pageNumber , int pageSize ); Task < PagedList < InvoiceLineApiModel >> GetInvoiceLineByTrackId ( int id , int pageNumber , int pageSize ); Task < InvoiceLineApiModel > AddInvoiceLine ( InvoiceLineApiModel newInvoiceLineApiModel ); Task < bool > UpdateInvoiceLine ( InvoiceLineApiModel invoiceLineApiModel ); Task < bool > DeleteInvoiceLine ( int id ); Task < PagedList < InvoiceApiModel >> GetAllInvoice ( int pageNumber , int pageSize ); Task < InvoiceApiModel ?> GetInvoiceById ( int id ); Task < PagedList < InvoiceApiModel >> GetInvoiceByCustomerId ( int id , int pageNumber , int pageSize ); Task < InvoiceApiModel > AddInvoice ( InvoiceApiModel newInvoiceApiModel ); Task < bool > UpdateInvoice ( InvoiceApiModel invoiceApiModel ); Task < bool > DeleteInvoice ( int id ); Task < PagedList < InvoiceApiModel >> GetInvoiceByEmployeeId ( int id , int pageNumber , int pageSize ); Task < PagedList < MediaTypeApiModel >> GetAllMediaType ( int pageNumber , int pageSize ); Task < MediaTypeApiModel ?> GetMediaTypeById ( int id ); Task < MediaTypeApiModel > AddMediaType ( MediaTypeApiModel newMediaTypeApiModel ); Task < bool > UpdateMediaType ( MediaTypeApiModel mediaTypeApiModel ); Task < bool > DeleteMediaType ( int id ); Task < PagedList < PlaylistApiModel >> GetAllPlaylist ( int pageNumber , int pageSize ); Task < PlaylistApiModel > GetPlaylistById ( int id ); Task < PlaylistApiModel > AddPlaylist ( PlaylistApiModel newPlaylistApiModel ); Task < bool > UpdatePlaylist ( PlaylistApiModel playlistApiModel ); Task < bool > DeletePlaylist ( int id ); Task < PagedList < TrackApiModel >> GetAllTrack ( int pageNumber , int pageSize ); Task < TrackApiModel ?> GetTrackById ( int id ); Task < PagedList < TrackApiModel >?> GetTrackByAlbumId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByGenreId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByMediaTypeId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByPlaylistId ( int id , int pageNumber , int pageSize ); Task < TrackApiModel > AddTrack ( TrackApiModel newTrackApiModel ); Task < bool > UpdateTrack ( TrackApiModel trackApiModel ); Task < bool > DeleteTrack ( int id ); Task < PagedList < TrackApiModel >> GetTrackByArtistId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByInvoiceId ( int id , int pageNumber , int pageSize ); } UPDATE CHINOOKSUPERVISOR PARTIAL CLASS FILES IN DOMAIN PROJECT \u00b6 public partial class ChinookSupervisor { public async Task < PagedList < AlbumApiModel >> GetAllAlbum ( int pageNumber , int pageSize ) // todo { var albums = await _albumRepository . GetAll ( pageNumber , pageSize ); var albumApiModels = albums . ConvertAll < AlbumApiModel > (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } var newPagedList = new PagedList < AlbumApiModel > ( albumApiModels . ToList (), albums . TotalCount , albums . CurrentPage , albums . PageSize ); return newPagedList ; } public async Task < AlbumApiModel ?> GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel > ( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); var result = ( _artistRepository . GetById ( album . ArtistId )). Result ; if ( result != null ) albumApiModel . ArtistName = result . Name ; //albumApiModel.Tracks = (await GetTrackByAlbumId(id) ?? Array.Empty<TrackApiModel>()).ToList(); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } } public async Task < PagedList < AlbumApiModel >> GetAlbumByArtistId ( int id , int pageNumber , int pageSize ) { var albums = await _albumRepository . GetByArtistId ( id , pageNumber , pageSize ); var albumApiModels = albums . ConvertAll < AlbumApiModel > (); var newPagedList = new PagedList < AlbumApiModel > ( albumApiModels . ToList (), albums . TotalCount , albums . CurrentPage , albums . PageSize ); return newPagedList ; } public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); } public Task < bool > DeleteAlbum ( int id ) => _albumRepository . Delete ( id ); } UPDATE CONTROLLERS IN API PROJECT \u00b6 //[Authorize] [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion(\"1.0\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < PagedList < AlbumApiModel >>> Get ([ FromQuery ] int pageNumber , [ FromQuery ] int pageSize ) { try { var albums = await _chinookSupervisor . GetAllAlbum ( pageNumber , pageSize ); if ( albums . Any ()) { var metadata = new { albums . TotalCount , albums . PageSize , albums . CurrentPage , albums . TotalPages , albums . HasNext , albums . HasPrevious }; Response . Headers . Add ( \"X-Pagination\" , JsonSerializer . Serialize ( metadata )); return Ok ( albums ); } var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 404 , }; } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status500InternalServerError , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Get All Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } return Ok ( await _chinookSupervisor . AddAlbum ( input )); } catch ( ValidationException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status500InternalServerError , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } catch ( ValidationException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Delete action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < PagedList < AlbumApiModel >>> GetByArtistId ( int id , [ FromQuery ] int pageNumber , [ FromQuery ] int pageSize ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id , pageNumber , pageSize ); if ( albums . Any ()) { var metadata = new { albums . TotalCount , albums . PageSize , albums . CurrentPage , albums . TotalPages , albums . HasNext , albums . HasPrevious }; Response . Headers . Add ( \"X-Pagination\" , JsonSerializer . Serialize ( metadata )); return Ok ( albums ); } return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } }","title":"Adding Paging to your API Queries"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#adding-paging-to-your-api-queries","text":"","title":"Adding Paging to your API Queries"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#start-from-previous-modules-end","text":"Using the PATCH HTTP Request in your API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#add-microsoftentityframeworkcore-nuget-package-to-domain-project","text":"dotnet add package Microsoft.EntityFrameworkCore","title":"Add Microsoft.EntityFrameworkCore NUGET PACKAGE TO DOMAIN PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#add-pagedlist-class-to-your-domain-project","text":"public class PagedList < T > : List < T > { public int CurrentPage { get ; } public int TotalPages { get ; } public int PageSize { get ; } public int TotalCount { get ; } public bool HasPrevious => CurrentPage > 1 ; public bool HasNext => CurrentPage < TotalPages ; public PagedList ( List < T > items , int count , int pageNumber , int pageSize ) { TotalCount = count ; PageSize = pageSize ; CurrentPage = pageNumber ; TotalPages = ( int ) Math . Ceiling ( count / ( double ) pageSize ); AddRange ( items ); } public PagedList ( PagedList < T > items ) { TotalCount = items . TotalCount ; PageSize = items . PageSize ; CurrentPage = items . CurrentPage ; TotalPages = ( int ) Math . Ceiling ( items . TotalCount / ( double ) items . PageSize ); AddRange ( items ); } public static async Task < PagedList < T >> ToPagedListAsync ( IQueryable < T > source , int pageNumber , int pageSize ) { var count = source . Count (); var items = await source . Skip (( pageNumber - 1 ) * pageSize ). Take ( pageSize ). ToListAsync (); return new PagedList < T > ( items , count , pageNumber , pageSize ); } }","title":"ADD PAGEDLIST CLASS TO YOUR DOMAIN PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#update-data-repository-interfaces-in-domain-project","text":"public interface IAlbumRepository : IDisposable { Task < PagedList < Album >> GetAll ( int pageNumber , int pageSize ); Task < Album > GetById ( int id ); Task < PagedList < Album >> GetByArtistId ( int id , int pageNumber , int pageSize ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); }","title":"UPDATE DATA REPOSITORY INTERFACES IN DOMAIN PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#update-data-repositories-in-data-project","text":"public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < PagedList < Album >> GetAll ( int pageNumber , int pageSize ) => await PagedList < Album > . ToPagedListAsync ( _context . Set < Album > (). AsNoTrackingWithIdentityResolution (), pageNumber , pageSize ); public async Task < Album > GetById ( int id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if ( ! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if ( ! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < PagedList < Album >> GetByArtistId ( int id , int pageNumber , int pageSize ) => await PagedList < Album > . ToPagedListAsync ( _context . Albums . Where ( a => a . ArtistId == id ) . AsNoTrackingWithIdentityResolution (), pageNumber , pageSize ); }","title":"UPDATE DATA REPOSITORIES IN DATA PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#update-ichinooksupervisor-in-domain-project","text":"public interface IChinookSupervisor { Task < PagedList < AlbumApiModel >> GetAllAlbum ( int pageNumber , int pageSize ); Task < AlbumApiModel ?> GetAlbumById ( int id ); Task < PagedList < AlbumApiModel >> GetAlbumByArtistId ( int id , int pageNumber , int pageSize ); Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ); Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ); Task < bool > DeleteAlbum ( int id ); Task < PagedList < ArtistApiModel >> GetAllArtist ( int pageNumber , int pageSize ); Task < ArtistApiModel > GetArtistById ( int id ); Task < ArtistApiModel > AddArtist ( ArtistApiModel newArtistApiModel ); Task < bool > UpdateArtist ( ArtistApiModel artistApiModel ); Task < bool > DeleteArtist ( int id ); Task < PagedList < CustomerApiModel >> GetAllCustomer ( int pageNumber , int pageSize ); Task < CustomerApiModel > GetCustomerById ( int id ); Task < PagedList < CustomerApiModel >> GetCustomerBySupportRepId ( int id , int pageNumber , int pageSize ); Task < CustomerApiModel > AddCustomer ( CustomerApiModel newCustomerApiModel ); Task < bool > UpdateCustomer ( CustomerApiModel customerApiModel ); Task < bool > DeleteCustomer ( int id ); Task < PagedList < EmployeeApiModel >> GetAllEmployee ( int pageNumber , int pageSize ); Task < EmployeeApiModel ?> GetEmployeeById ( int id ); Task < EmployeeApiModel ?> GetEmployeeReportsTo ( int id ); Task < EmployeeApiModel > AddEmployee ( EmployeeApiModel newEmployeeApiModel ); Task < bool > UpdateEmployee ( EmployeeApiModel employeeApiModel ); Task < bool > DeleteEmployee ( int id ); Task < IEnumerable < EmployeeApiModel >> GetEmployeeDirectReports ( int id ); Task < IEnumerable < EmployeeApiModel >> GetDirectReports ( int id ); Task < PagedList < GenreApiModel >> GetAllGenre ( int pageNumber , int pageSize ); Task < GenreApiModel ?> GetGenreById ( int id ); Task < GenreApiModel > AddGenre ( GenreApiModel newGenreApiModel ); Task < bool > UpdateGenre ( GenreApiModel genreApiModel ); Task < bool > DeleteGenre ( int id ); Task < PagedList < InvoiceLineApiModel >> GetAllInvoiceLine ( int pageNumber , int pageSize ); Task < InvoiceLineApiModel > GetInvoiceLineById ( int id ); Task < PagedList < InvoiceLineApiModel >> GetInvoiceLineByInvoiceId ( int id , int pageNumber , int pageSize ); Task < PagedList < InvoiceLineApiModel >> GetInvoiceLineByTrackId ( int id , int pageNumber , int pageSize ); Task < InvoiceLineApiModel > AddInvoiceLine ( InvoiceLineApiModel newInvoiceLineApiModel ); Task < bool > UpdateInvoiceLine ( InvoiceLineApiModel invoiceLineApiModel ); Task < bool > DeleteInvoiceLine ( int id ); Task < PagedList < InvoiceApiModel >> GetAllInvoice ( int pageNumber , int pageSize ); Task < InvoiceApiModel ?> GetInvoiceById ( int id ); Task < PagedList < InvoiceApiModel >> GetInvoiceByCustomerId ( int id , int pageNumber , int pageSize ); Task < InvoiceApiModel > AddInvoice ( InvoiceApiModel newInvoiceApiModel ); Task < bool > UpdateInvoice ( InvoiceApiModel invoiceApiModel ); Task < bool > DeleteInvoice ( int id ); Task < PagedList < InvoiceApiModel >> GetInvoiceByEmployeeId ( int id , int pageNumber , int pageSize ); Task < PagedList < MediaTypeApiModel >> GetAllMediaType ( int pageNumber , int pageSize ); Task < MediaTypeApiModel ?> GetMediaTypeById ( int id ); Task < MediaTypeApiModel > AddMediaType ( MediaTypeApiModel newMediaTypeApiModel ); Task < bool > UpdateMediaType ( MediaTypeApiModel mediaTypeApiModel ); Task < bool > DeleteMediaType ( int id ); Task < PagedList < PlaylistApiModel >> GetAllPlaylist ( int pageNumber , int pageSize ); Task < PlaylistApiModel > GetPlaylistById ( int id ); Task < PlaylistApiModel > AddPlaylist ( PlaylistApiModel newPlaylistApiModel ); Task < bool > UpdatePlaylist ( PlaylistApiModel playlistApiModel ); Task < bool > DeletePlaylist ( int id ); Task < PagedList < TrackApiModel >> GetAllTrack ( int pageNumber , int pageSize ); Task < TrackApiModel ?> GetTrackById ( int id ); Task < PagedList < TrackApiModel >?> GetTrackByAlbumId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByGenreId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByMediaTypeId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByPlaylistId ( int id , int pageNumber , int pageSize ); Task < TrackApiModel > AddTrack ( TrackApiModel newTrackApiModel ); Task < bool > UpdateTrack ( TrackApiModel trackApiModel ); Task < bool > DeleteTrack ( int id ); Task < PagedList < TrackApiModel >> GetTrackByArtistId ( int id , int pageNumber , int pageSize ); Task < PagedList < TrackApiModel >> GetTrackByInvoiceId ( int id , int pageNumber , int pageSize ); }","title":"UPDATE ICHINOOKSUPERVISOR IN DOMAIN PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#update-chinooksupervisor-partial-class-files-in-domain-project","text":"public partial class ChinookSupervisor { public async Task < PagedList < AlbumApiModel >> GetAllAlbum ( int pageNumber , int pageSize ) // todo { var albums = await _albumRepository . GetAll ( pageNumber , pageSize ); var albumApiModels = albums . ConvertAll < AlbumApiModel > (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } var newPagedList = new PagedList < AlbumApiModel > ( albumApiModels . ToList (), albums . TotalCount , albums . CurrentPage , albums . PageSize ); return newPagedList ; } public async Task < AlbumApiModel ?> GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel > ( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); var result = ( _artistRepository . GetById ( album . ArtistId )). Result ; if ( result != null ) albumApiModel . ArtistName = result . Name ; //albumApiModel.Tracks = (await GetTrackByAlbumId(id) ?? Array.Empty<TrackApiModel>()).ToList(); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } } public async Task < PagedList < AlbumApiModel >> GetAlbumByArtistId ( int id , int pageNumber , int pageSize ) { var albums = await _albumRepository . GetByArtistId ( id , pageNumber , pageSize ); var albumApiModels = albums . ConvertAll < AlbumApiModel > (); var newPagedList = new PagedList < AlbumApiModel > ( albumApiModels . ToList (), albums . TotalCount , albums . CurrentPage , albums . PageSize ); return newPagedList ; } public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); } public Task < bool > DeleteAlbum ( int id ) => _albumRepository . Delete ( id ); }","title":"UPDATE CHINOOKSUPERVISOR PARTIAL CLASS FILES IN DOMAIN PROJECT"},{"location":"Beyond%20the%20Workshop/adding-paging-to-your-api-queries/#update-controllers-in-api-project","text":"//[Authorize] [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion(\"1.0\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < PagedList < AlbumApiModel >>> Get ([ FromQuery ] int pageNumber , [ FromQuery ] int pageSize ) { try { var albums = await _chinookSupervisor . GetAllAlbum ( pageNumber , pageSize ); if ( albums . Any ()) { var metadata = new { albums . TotalCount , albums . PageSize , albums . CurrentPage , albums . TotalPages , albums . HasNext , albums . HasPrevious }; Response . Headers . Add ( \"X-Pagination\" , JsonSerializer . Serialize ( metadata )); return Ok ( albums ); } var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 404 , }; } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status500InternalServerError , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Get All Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } return Ok ( await _chinookSupervisor . AddAlbum ( input )); } catch ( ValidationException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( AlbumProblemException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"{problemDetails.Detail}: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status500InternalServerError , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } catch ( ValidationException ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Delete action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < PagedList < AlbumApiModel >>> GetByArtistId ( int id , [ FromQuery ] int pageNumber , [ FromQuery ] int pageSize ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id , pageNumber , pageSize ); if ( albums . Any ()) { var metadata = new { albums . TotalCount , albums . PageSize , albums . CurrentPage , albums . TotalPages , albums . HasNext , albums . HasPrevious }; Response . Headers . Add ( \"X-Pagination\" , JsonSerializer . Serialize ( metadata )); return Ok ( albums ); } return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } catch ( Exception ex ) { var problemDetails = new AlbumProblemDetails { Status = StatusCodes . Status404NotFound , Type = \"https://example.com/api/Artist/not-found\" , Title = \"Could not find any artists\" , Detail = \"Something went wrong inside the ArtistController Get All action\" , AlbumId = null , Instance = HttpContext . Request . Path }; _logger . LogError ( $\"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return new ObjectResult ( problemDetails ) { ContentTypes = { \"application/problem+json\" }, StatusCode = 403 , }; } } }","title":"UPDATE CONTROLLERS IN API PROJECT"},{"location":"Beyond%20the%20Workshop/formatting-response-data/","text":"Formatting Response Data in your API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Documenting your API with OpenAPI Format-specific Action Results \u00b6 JSON-formatted Data Response \u00b6 [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); } String-formatted Data Response \u00b6 [HttpGet(\"About\")] public ContentResult About () { return Content ( \"An API listing authors of docs.asp.net.\" ); } [HttpGet(\"version\")] public string Version () { return \"Version 1.0.0\" ; } By default, ASP.NET 5 supports the following formats for responses: \u00b6 application/json text/json text/plain Web Browser & Response Formats \u00b6 When ASP.NET 5 Web API detects a browser calling an endpoint what happens? \u00b6 The Accept header is ignored. The content is returned in JSON, unless otherwise configured. To configure an app to honor browser accept headers: \u00b6 services . AddControllers ( options => { options . RespectBrowserAcceptHeader = true ; // false by default }); If no formatter is found that can satisfy the client's request, ASP.NET Core will: \u00b6 Returns 406 Not Acceptable if MvcOptions.ReturnHttpNotAcceptable is set to true Restrict Response Formats \u00b6 To restrict the response formats, apply the [Produces] filter. Like most Filters, [Produces] can be applied at the action, controller, or global scope: \u00b6 [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < ArtistApiModel >> Post ([ FromBody ] ArtistApiModel input ) { Response Format URL Mappings \u00b6 The mapping from request path should be specified in the route the API is using. For example: \u00b6 [Route(\"api/[controller] \")] [ApiController] [FormatFilter] public class AlbumsController : ControllerBase { [HttpGet(\"{id}.{format?}\")] public Album Get ( int id ) { Route Formatter /api/Album/5 The default output formatter /api/Album/5.json The JSON formatter (if configured) /api/Album/5.xml The XML formatter (if configured)","title":"Formatting Reponse Data in your API"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#formatting-response-data-in-your-api","text":"","title":"Formatting Response Data in your API"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#start-from-previous-modules-end","text":"Documenting your API with OpenAPI","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#format-specific-action-results","text":"","title":"Format-specific Action Results"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#json-formatted-data-response","text":"[HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { return Ok ( await _chinookSupervisor . GetAllAlbum ()); }","title":"JSON-formatted Data Response"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#string-formatted-data-response","text":"[HttpGet(\"About\")] public ContentResult About () { return Content ( \"An API listing authors of docs.asp.net.\" ); } [HttpGet(\"version\")] public string Version () { return \"Version 1.0.0\" ; }","title":"String-formatted Data Response"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#by-default-aspnet-5-supports-the-following-formats-for-responses","text":"application/json text/json text/plain","title":"By default, ASP.NET 5 supports the following formats for responses:"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#web-browser-response-formats","text":"","title":"Web Browser &amp; Response Formats"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#when-aspnet-5-web-api-detects-a-browser-calling-an-endpoint-what-happens","text":"The Accept header is ignored. The content is returned in JSON, unless otherwise configured.","title":"When ASP.NET 5 Web API detects a browser calling an endpoint what happens?"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#to-configure-an-app-to-honor-browser-accept-headers","text":"services . AddControllers ( options => { options . RespectBrowserAcceptHeader = true ; // false by default });","title":"To configure an app to honor browser accept headers:"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#if-no-formatter-is-found-that-can-satisfy-the-clients-request-aspnet-core-will","text":"Returns 406 Not Acceptable if MvcOptions.ReturnHttpNotAcceptable is set to true","title":"If no formatter is found that can satisfy the client's request, ASP.NET Core will:"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#restrict-response-formats","text":"","title":"Restrict Response Formats"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#to-restrict-the-response-formats-apply-the-produces-filter-like-most-filters-produces-can-be-applied-at-the-action-controller-or-global-scope","text":"[HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < ArtistApiModel >> Post ([ FromBody ] ArtistApiModel input ) {","title":"To restrict the response formats, apply the [Produces] filter. Like most Filters, [Produces] can be applied at the action, controller, or global scope:"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#response-format-url-mappings","text":"","title":"Response Format URL Mappings"},{"location":"Beyond%20the%20Workshop/formatting-response-data/#the-mapping-from-request-path-should-be-specified-in-the-route-the-api-is-using-for-example","text":"[Route(\"api/[controller] \")] [ApiController] [FormatFilter] public class AlbumsController : ControllerBase { [HttpGet(\"{id}.{format?}\")] public Album Get ( int id ) { Route Formatter /api/Album/5 The default output formatter /api/Album/5.json The JSON formatter (if configured) /api/Album/5.xml The XML formatter (if configured)","title":"The mapping from request path should be specified in the route the API is using. For example:"},{"location":"Beyond%20the%20Workshop/rate-limiting-your-api/","text":"Rate Limiting your API \u00b6 To be completed at a later date \u00b6","title":"Rate Limiting your API"},{"location":"Beyond%20the%20Workshop/rate-limiting-your-api/#rate-limiting-your-api","text":"","title":"Rate Limiting your API"},{"location":"Beyond%20the%20Workshop/rate-limiting-your-api/#to-be-completed-at-a-later-date","text":"","title":"To be completed at a later date"},{"location":"Beyond%20the%20Workshop/using-hypermedia-in-your-api-responses/","text":"Using Hypermedia in your API Responses \u00b6 To be completed at a later date \u00b6","title":"Using Hypermedia in your API Responses"},{"location":"Beyond%20the%20Workshop/using-hypermedia-in-your-api-responses/#using-hypermedia-in-your-api-responses","text":"","title":"Using Hypermedia in your API Responses"},{"location":"Beyond%20the%20Workshop/using-hypermedia-in-your-api-responses/#to-be-completed-at-a-later-date","text":"","title":"To be completed at a later date"},{"location":"Beyond%20the%20Workshop/using-patch-request/","text":"Using the PATCH HTTP Request in your API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Formatting Response Data in your API ADD NEWTONSOFTJSON NUGET PACKAGES TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson ADD PATCH ACTION TO TRACK CONTROLLER \u00b6 [HttpPatch(\"{id}\")] public async Task < ActionResult < TrackApiModel >> Patch ( int id , [ FromBody ] JsonPatchDocument < TrackApiModel > input ) { var track = await _chinookSupervisor . GetTrackById ( id ); if ( track == null ) { return NotFound (); } input . ApplyTo ( track , ModelState ); // Must have Microsoft.AspNetCore.Mvc.NewtonsoftJson installed if ( ! ModelState . IsValid ) { return BadRequest ( ModelState ); } try { await _chinookSupervisor . UpdateTrack ( track ); //Update in the database } catch ( DbUpdateConcurrencyException ) { return NotFound (); } return Ok ( track ); } TEST PATCH ADD OPERATION \u00b6 For Id = 41 { \"value\" : \"Hand In My Pocket (Live)\" , \"path\" : \"/Name\" , \"op\" : \"add\" } TEST PATCH REMOVE OPERATION \u00b6 For Id = 41 { \"path\" : \"/Name\" , \"op\" : \"remove\" } TEST PATCH REPLACE OPERATION \u00b6 For Id = 41 { \"value\" : \"221599\" , \"path\" : \"/Milliseconds\" , \"op\" : \"replace\" }","title":"Using the PATCH HTTP Request in your API"},{"location":"Beyond%20the%20Workshop/using-patch-request/#using-the-patch-http-request-in-your-api","text":"","title":"Using the PATCH HTTP Request in your API"},{"location":"Beyond%20the%20Workshop/using-patch-request/#start-from-previous-modules-end","text":"Formatting Response Data in your API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Beyond%20the%20Workshop/using-patch-request/#add-newtonsoftjson-nuget-packages-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson","title":"ADD NEWTONSOFTJSON NUGET PACKAGES TO API PROJECT"},{"location":"Beyond%20the%20Workshop/using-patch-request/#add-patch-action-to-track-controller","text":"[HttpPatch(\"{id}\")] public async Task < ActionResult < TrackApiModel >> Patch ( int id , [ FromBody ] JsonPatchDocument < TrackApiModel > input ) { var track = await _chinookSupervisor . GetTrackById ( id ); if ( track == null ) { return NotFound (); } input . ApplyTo ( track , ModelState ); // Must have Microsoft.AspNetCore.Mvc.NewtonsoftJson installed if ( ! ModelState . IsValid ) { return BadRequest ( ModelState ); } try { await _chinookSupervisor . UpdateTrack ( track ); //Update in the database } catch ( DbUpdateConcurrencyException ) { return NotFound (); } return Ok ( track ); }","title":"ADD PATCH ACTION TO TRACK CONTROLLER"},{"location":"Beyond%20the%20Workshop/using-patch-request/#test-patch-add-operation","text":"For Id = 41 { \"value\" : \"Hand In My Pocket (Live)\" , \"path\" : \"/Name\" , \"op\" : \"add\" }","title":"TEST PATCH ADD OPERATION"},{"location":"Beyond%20the%20Workshop/using-patch-request/#test-patch-remove-operation","text":"For Id = 41 { \"path\" : \"/Name\" , \"op\" : \"remove\" }","title":"TEST PATCH REMOVE OPERATION"},{"location":"Beyond%20the%20Workshop/using-patch-request/#test-patch-replace-operation","text":"For Id = 41 { \"value\" : \"221599\" , \"path\" : \"/Milliseconds\" , \"op\" : \"replace\" }","title":"TEST PATCH REPLACE OPERATION"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/","text":"Consuming ASP.NET Web API in .NET \u00b6 CREATE NEW CONSOLE PROJECT \u00b6 dotnet new console --name ChinookAPIClient ADD the following async method to the Program class static Task ProcessRepositories () { } CREATE NEW STATIC INSTANCE OF HttpClinet \u00b6 // See https://aka.ms/new-console-template for more information HttpClient client = new HttpClient (); REPLACE MAIN METHOD \u00b6 // See https://aka.ms/new-console-template for more information HttpClient client = new HttpClient (); await ProcessRepositories ( client ); ADD API CALL TO ProcessRepositories \u00b6 static async Task ProcessRepositories ( HttpClient client ) { client . DefaultRequestHeaders . Accept . Clear (); client . DefaultRequestHeaders . Accept . Add ( new MediaTypeWithQualityHeaderValue ( \"application/json\" )); client . DefaultRequestHeaders . Add ( \"User-Agent\" , \".NET Console\" ); var stringTask = client . GetStringAsync ( \"https://localhost:7211/api/v1/Customer\" ); var msg = await stringTask ; Console . Write ( msg ); }","title":"Consuming ASP.NET Web API in .NET"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#consuming-aspnet-web-api-in-net","text":"","title":"Consuming ASP.NET Web API in .NET"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#create-new-console-project","text":"dotnet new console --name ChinookAPIClient ADD the following async method to the Program class static Task ProcessRepositories () { }","title":"CREATE NEW CONSOLE PROJECT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#create-new-static-instance-of-httpclinet","text":"// See https://aka.ms/new-console-template for more information HttpClient client = new HttpClient ();","title":"CREATE NEW STATIC INSTANCE OF HttpClinet"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#replace-main-method","text":"// See https://aka.ms/new-console-template for more information HttpClient client = new HttpClient (); await ProcessRepositories ( client );","title":"REPLACE MAIN METHOD"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-dotnet/#add-api-call-to-processrepositories","text":"static async Task ProcessRepositories ( HttpClient client ) { client . DefaultRequestHeaders . Accept . Clear (); client . DefaultRequestHeaders . Accept . Add ( new MediaTypeWithQualityHeaderValue ( \"application/json\" )); client . DefaultRequestHeaders . Add ( \"User-Agent\" , \".NET Console\" ); var stringTask = client . GetStringAsync ( \"https://localhost:7211/api/v1/Customer\" ); var msg = await stringTask ; Console . Write ( msg ); }","title":"ADD API CALL TO ProcessRepositories"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/","text":"Consuming ASP.NET Web API in Javascript \u00b6 ADD LINES TO CONFIGURE IN STARTUP.CS IN API PROJECT \u00b6 app . UseDefaultFiles (); app . UseStaticFiles (); CREATE A WWWROOT FOLDER IN THE PROJECT ROOT. \u00b6 CREATE A CSS FOLDER INSIDE OF THE WWWROOT FOLDER. \u00b6 CREATE A JS FOLDER INSIDE OF THE WWWROOT FOLDER. \u00b6 ADD AN HTML FILE NAMED INDEX.HTML TO THE WWWROOT FOLDER \u00b6 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Chinook Albums </ title > < link rel = \"stylesheet\" href = \"css/site.css\" /> </ head > < body > < h1 > Chinook Albums </ h1 > < p id = \"counter\" ></ p > < table > < tr > < th > Name </ th > </ tr > < tbody id = \"albums\" ></ tbody > </ table > < script src = \"js/site.js\" asp-append-version = \"true\" ></ script > < script type = \"text/javascript\" > getAlbums (); </ script > </ body > </ html > ADD A CSS FILE NAMED SITE.CSS TO THE WWWROOT/CSS FOLDER \u00b6 input [ type = 'submit' ], button , [ aria-label ] { cursor : pointer ; } # editForm { display : none ; } table { font-family : Arial , sans-serif ; border : 1 px solid ; border-collapse : collapse ; } th { background-color : #f8f8f8 ; padding : 5 px ; } td { border : 1 px solid ; padding : 5 px ; } ADD A JAVASCRIPT FILE NAMED SITE.JS TO THE WWWROOT/JS FOLDER \u00b6 const uri = 'api/Album' ; let albums = []; function getAlbums () { window . fetch ( uri ) . then ( response => response . json ()) . then ( data => window . _displayAlbums ( data )) . catch ( error => console . error ( 'Unable to get albums.' , error )); } function _displayCount ( albumCount ) { const name = ( window . itemCount === 1 ) ? 'album' : 'albums' ; document . getElementById ( 'counter' ). innerText = ` ${ window . itemCount } ${ name } ` ; } function _displayAlbums ( data ) { const tBody = document . getElementById ( 'albums' ); tBody . innerHTML = '' ; data . forEach ( album => { let isCompleteCheckbox = document . createElement ( 'input' ); let tr = tBody . insertRow (); let td1 = tr . insertCell ( 0 ); let textNode = document . createTextNode ( album . title ); td1 . appendChild ( textNode ); }); albums = data ; } RUN FROM WWWROOT \u00b6 A change to the ASP.NET Core project's launch settings may be required to test the HTML page locally: Open Properties\\launchSettings.json. Remove \"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, Remove the launchUrl property to force the app to open at index.html\u2014the project's default file. RUN API PROJECT \u00b6 OPEN NEW TAB IN BROWSER AND OPEN INDEX.HTML \u00b6","title":"Consuming ASP.NET Web API in Javascript"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#consuming-aspnet-web-api-in-javascript","text":"","title":"Consuming ASP.NET Web API in Javascript"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#add-lines-to-configure-in-startupcs-in-api-project","text":"app . UseDefaultFiles (); app . UseStaticFiles ();","title":"ADD LINES TO CONFIGURE IN STARTUP.CS IN API PROJECT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#create-a-wwwroot-folder-in-the-project-root","text":"","title":"CREATE A WWWROOT FOLDER IN THE PROJECT ROOT."},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#create-a-css-folder-inside-of-the-wwwroot-folder","text":"","title":"CREATE A CSS FOLDER INSIDE OF THE WWWROOT FOLDER."},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#create-a-js-folder-inside-of-the-wwwroot-folder","text":"","title":"CREATE A JS FOLDER INSIDE OF THE WWWROOT FOLDER."},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#add-an-html-file-named-indexhtml-to-the-wwwroot-folder","text":"<!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Chinook Albums </ title > < link rel = \"stylesheet\" href = \"css/site.css\" /> </ head > < body > < h1 > Chinook Albums </ h1 > < p id = \"counter\" ></ p > < table > < tr > < th > Name </ th > </ tr > < tbody id = \"albums\" ></ tbody > </ table > < script src = \"js/site.js\" asp-append-version = \"true\" ></ script > < script type = \"text/javascript\" > getAlbums (); </ script > </ body > </ html >","title":"ADD AN HTML FILE NAMED INDEX.HTML TO THE WWWROOT FOLDER"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#add-a-css-file-named-sitecss-to-the-wwwrootcss-folder","text":"input [ type = 'submit' ], button , [ aria-label ] { cursor : pointer ; } # editForm { display : none ; } table { font-family : Arial , sans-serif ; border : 1 px solid ; border-collapse : collapse ; } th { background-color : #f8f8f8 ; padding : 5 px ; } td { border : 1 px solid ; padding : 5 px ; }","title":"ADD A CSS FILE NAMED SITE.CSS TO THE WWWROOT/CSS FOLDER"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#add-a-javascript-file-named-sitejs-to-the-wwwrootjs-folder","text":"const uri = 'api/Album' ; let albums = []; function getAlbums () { window . fetch ( uri ) . then ( response => response . json ()) . then ( data => window . _displayAlbums ( data )) . catch ( error => console . error ( 'Unable to get albums.' , error )); } function _displayCount ( albumCount ) { const name = ( window . itemCount === 1 ) ? 'album' : 'albums' ; document . getElementById ( 'counter' ). innerText = ` ${ window . itemCount } ${ name } ` ; } function _displayAlbums ( data ) { const tBody = document . getElementById ( 'albums' ); tBody . innerHTML = '' ; data . forEach ( album => { let isCompleteCheckbox = document . createElement ( 'input' ); let tr = tBody . insertRow (); let td1 = tr . insertCell ( 0 ); let textNode = document . createTextNode ( album . title ); td1 . appendChild ( textNode ); }); albums = data ; }","title":"ADD A JAVASCRIPT FILE NAMED SITE.JS TO THE WWWROOT/JS FOLDER"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#run-from-wwwroot","text":"A change to the ASP.NET Core project's launch settings may be required to test the HTML page locally: Open Properties\\launchSettings.json. Remove \"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, Remove the launchUrl property to force the app to open at index.html\u2014the project's default file.","title":"RUN FROM WWWROOT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#run-api-project","text":"","title":"RUN API PROJECT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-in-javascript/#open-new-tab-in-browser-and-open-indexhtml","text":"","title":"OPEN NEW TAB IN BROWSER AND OPEN INDEX.HTML"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/","text":"Consuming ASP.NET Web API with OpenAPI Document \u00b6 INSTALL .NET OPENAPI TOOL \u00b6 Microsoft.dotnet-openapi is a .NET Core Global Tool for managing OpenAPI references within a project. dotnet tool install - g Microsoft . dotnet - openapi CREATE NEW CONSOLE PROJECT \u00b6 dotnet new console --name OpenAPIClient GET SWAGGER DOC FROM YOUR WEB APIs \u00b6 Run your Web API \u00b6 ADD OPENAPI CONNECTED SERVICE TO PROJECT \u00b6 WRITE CODE TO USE OPENAPI \u00b6 using ChinookOpenAPI ; using var httpClient = new HttpClient (); var apiClient = new ChinookOpenAPIClient ( \"https://localhost:7011/\" , httpClient ); var genres = await apiClient . GenreAllAsync ( 1 , 20 , \"\" ); if ( genres != null ) foreach ( var genre in genres ) { Console . WriteLine ( genre . Name ); } Console . ReadLine ();","title":"Consuming ASP.NET Web API with OpenAPI Document"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#consuming-aspnet-web-api-with-openapi-document","text":"","title":"Consuming ASP.NET Web API with OpenAPI Document"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#install-net-openapi-tool","text":"Microsoft.dotnet-openapi is a .NET Core Global Tool for managing OpenAPI references within a project. dotnet tool install - g Microsoft . dotnet - openapi","title":"INSTALL .NET OPENAPI TOOL"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#create-new-console-project","text":"dotnet new console --name OpenAPIClient","title":"CREATE NEW CONSOLE PROJECT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#get-swagger-doc-from-your-web-apis","text":"","title":"GET SWAGGER DOC FROM YOUR WEB APIs"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#run-your-web-api","text":"","title":"Run your Web API"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#add-openapi-connected-service-to-project","text":"","title":"ADD OPENAPI CONNECTED SERVICE TO PROJECT"},{"location":"Consuming%20ASP.NET%20Web%20API/consuming-web-api-with-openapi/#write-code-to-use-openapi","text":"using ChinookOpenAPI ; using var httpClient = new HttpClient (); var apiClient = new ChinookOpenAPIClient ( \"https://localhost:7011/\" , httpClient ); var genres = await apiClient . GenreAllAsync ( 1 , 20 , \"\" ); if ( genres != null ) foreach ( var genre in genres ) { Console . WriteLine ( genre . Name ); } Console . ReadLine ();","title":"WRITE CODE TO USE OPENAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/","text":"Developing the Web API Business Rules \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Developing the API endpoints ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT \u00b6 ADD ADDCORS() TO SERVICESCONFIGURATION.CS \u00b6 public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); // Add services to the container. builder . Services . AddConnectionProvider ( builder . Configuration ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor (); builder . Services . ConfigureValidators (); builder . Services . AddAPILogging (); builder . Services . AddCORS (); var app = builder . Build (); app . UseHttpLogging (); app . UseHttpsRedirection (); app . UseCors (); app . MapControllers (); app . Run (); ADD CORS TO CONTROLLERS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS \u00b6 dotnet add package FluentValidation dotnet add package FluentValidation.AspNetCore ADD VALIDATORS TO DOMAIN PROJECT \u00b6 using Chinook.Domain.ApiModels ; using FluentValidation ; namespace Chinook.Domain.Validation ; public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } } ADD VALIDATORS TO DEPENDENCY INJECTION IN STARTUP IN API PROJECT \u00b6 public static void ConfigureValidators ( this IServiceCollection services ) { services . AddFluentValidation () . AddTransient < IValidator < AlbumApiModel > , AlbumValidator > () . AddTransient < IValidator < ArtistApiModel > , ArtistValidator > () . AddTransient < IValidator < CustomerApiModel > , CustomerValidator > () . AddTransient < IValidator < EmployeeApiModel > , EmployeeValidator > () . AddTransient < IValidator < GenreApiModel > , GenreValidator > () . AddTransient < IValidator < InvoiceApiModel > , InvoiceValidator > () . AddTransient < IValidator < InvoiceLineApiModel > , InvoiceLineValidator > () . AddTransient < IValidator < MediaTypeApiModel > , MediaTypeValidator > () . AddTransient < IValidator < PlaylistApiModel > , PlaylistValidator > () . AddTransient < IValidator < TrackApiModel > , TrackValidator > (); } ADD CONFIGUREVALIDATORS TO CONFIGURESERVICES \u00b6 builder . Services . ConfigureValidators (); GET VALIDATORS FROM DI IN SUPERVISOR \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; } ADD CODE TO CALL VALIDATION IN SUPERVISOR \u00b6 public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); } ADD ERROR HANDLING IN ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $\"The Album could not validated: Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Validation error while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $\"The Album could not validated: Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Validation error while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } } ERROR HANDLING AND RETURNING PROBLEM DETAILS \u00b6 For more details look at the Chinook6WebAPI repo in GitHub .","title":"Developing the API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#developing-the-web-api-business-rules","text":"","title":"Developing the Web API Business Rules"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#start-from-previous-modules-end","text":"Developing the API endpoints","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-cross-origin-resource-sharing-cors-to-api-project","text":"","title":"ADD CROSS ORIGIN RESOURCE SHARING (CORS) TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-addcors-to-servicesconfigurationcs","text":"public static void AddCORS ( this IServiceCollection services ) { services . AddCors ( options => { options . AddPolicy ( \"CorsPolicy\" , builder => builder . AllowAnyOrigin () . AllowAnyMethod () . AllowAnyHeader ()); }); } UPDATE STARTUP.CS using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); // Add services to the container. builder . Services . AddConnectionProvider ( builder . Configuration ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor (); builder . Services . ConfigureValidators (); builder . Services . AddAPILogging (); builder . Services . AddCORS (); var app = builder . Build (); app . UseHttpLogging (); app . UseHttpsRedirection (); app . UseCors (); app . MapControllers (); app . Run ();","title":"ADD ADDCORS() TO SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-cors-to-controllers","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase {","title":"ADD CORS TO CONTROLLERS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-fluentvalidation-nuget-to-api-and-domain-projects","text":"dotnet add package FluentValidation dotnet add package FluentValidation.AspNetCore","title":"ADD FLUENTVALIDATION NUGET TO API AND DOMAIN PROJECTS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-validators-to-domain-project","text":"using Chinook.Domain.ApiModels ; using FluentValidation ; namespace Chinook.Domain.Validation ; public class AlbumValidator : AbstractValidator < AlbumApiModel > { public AlbumValidator () { RuleFor ( a => a . Title ). NotNull (); RuleFor ( a => a . Title ). MinimumLength ( 3 ); RuleFor ( a => a . Title ). MaximumLength ( 160 ); RuleFor ( a => a . ArtistId ). NotNull (); } }","title":"ADD VALIDATORS TO DOMAIN PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-validators-to-dependency-injection-in-startup-in-api-project","text":"public static void ConfigureValidators ( this IServiceCollection services ) { services . AddFluentValidation () . AddTransient < IValidator < AlbumApiModel > , AlbumValidator > () . AddTransient < IValidator < ArtistApiModel > , ArtistValidator > () . AddTransient < IValidator < CustomerApiModel > , CustomerValidator > () . AddTransient < IValidator < EmployeeApiModel > , EmployeeValidator > () . AddTransient < IValidator < GenreApiModel > , GenreValidator > () . AddTransient < IValidator < InvoiceApiModel > , InvoiceValidator > () . AddTransient < IValidator < InvoiceLineApiModel > , InvoiceLineValidator > () . AddTransient < IValidator < MediaTypeApiModel > , MediaTypeValidator > () . AddTransient < IValidator < PlaylistApiModel > , PlaylistValidator > () . AddTransient < IValidator < TrackApiModel > , TrackValidator > (); }","title":"ADD VALIDATORS TO DEPENDENCY INJECTION IN STARTUP IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-configurevalidators-to-configureservices","text":"builder . Services . ConfigureValidators ();","title":"ADD CONFIGUREVALIDATORS TO CONFIGURESERVICES"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#get-validators-from-di-in-supervisor","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; }","title":"GET VALIDATORS FROM DI IN SUPERVISOR"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-code-to-call-validation-in-supervisor","text":"public async Task < AlbumApiModel > AddAlbum ( AlbumApiModel newAlbumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( newAlbumApiModel ); var album = newAlbumApiModel . Convert (); album = await _albumRepository . Add ( album ); newAlbumApiModel . Id = album . Id ; return newAlbumApiModel ; } public async Task < bool > UpdateAlbum ( AlbumApiModel albumApiModel ) { await _albumValidator . ValidateAndThrowAsync ( albumApiModel ); var album = await _albumRepository . GetById ( albumApiModel . Id ); if ( album is null ) return false ; album . Id = albumApiModel . Id ; album . Title = albumApiModel . Title ; album . ArtistId = albumApiModel . ArtistId ; return await _albumRepository . Update ( album ); }","title":"ADD CODE TO CALL VALIDATION IN SUPERVISOR"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#add-error-handling-in-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { try { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Get action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { try { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController GetById action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get Album By Id\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $\"The Album could not validated: Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Validation error while executing Add Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Add Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Add Albums\" ); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { try { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } catch ( ValidationException ex ) { _logger . LogError ( $\"The Album could not validated: Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Validation error while executing Update Albums\" ); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Update Album action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Update Albums\" ); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { try { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Delete action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Delete Album\" ); } } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { try { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } catch ( Exception ex ) { _logger . LogError ( $\"Something went wrong inside the AlbumController Get By Artist action: {ex}\" ); return StatusCode (( int ) HttpStatusCode . InternalServerError , \"Error occurred while executing Get All Albums for Artist\" ); } } }","title":"ADD ERROR HANDLING IN ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/api-business-rules/#error-handling-and-returning-problem-details","text":"For more details look at the Chinook6WebAPI repo in GitHub .","title":"ERROR HANDLING AND RETURNING PROBLEM DETAILS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/","text":"Caching Data in Your API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Developing the Web API Business Rules RESPONSE CACHING \u00b6 ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); } ADD TO CONFIGURE() IN STARTUP.CS \u00b6 **** Note: needs to go after CORS** using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . AddConnectionProvider ( builder . Configuration ); builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor (); builder . Services . AddAPILogging (); builder . Services . AddCORS (); builder . Services . ConfigureValidators (); builder . Services . AddCaching ( builder . Configuration ); builder . Services . AddControllers (); var app = builder . Build (); // Configure the HTTP request pipeline. app . UseCors (); app . UseResponseCaching (); app . UseHttpsRedirection (); app . UseAuthorization (); app . MapControllers (); app . Run (); ADD TO CONTROLLERS OR ACTIONS \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week What is seen in the Response Header \u00b6 Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves. IN-MEMORY CACHING \u00b6 Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.Abstractions ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); } ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorAlbum.cs \u00b6 public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel ?> GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel > ( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); var result = ( _artistRepository . GetById ( album . ArtistId )). Result ; if ( result != null ) albumApiModel . ArtistName = result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id ) ?? Array . Empty < TrackApiModel > ()). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } } DISTRIBUTED CACHING \u00b6 Install tool for MSSQL distrubuted caching using the commend in Command Prompt \u00b6 dotnet tool install --global dotnet-sql-cache CREATE NEW EMPTY DATABASE ChinookCacheDb IN MSSQL \u00b6 USE master ; GO CREATE DATABASE ChinookCacheDb ; GO -- Verify the database files and sizes SELECT name , size , size * 1 . 0 / 128 AS [ Size in MBs ] FROM sys . master_files WHERE name = N 'ChinookCacheDb' ; GO Run from Command Prompt \u00b6 dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain \u00b6 dotnet add package Microsoft.Extensions.Caching.SqlServer ADD ChinookSQLCache CONNECTIONSTRING TO APPSETTINGS \u00b6 { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft.AspNetCore\" : \"Warning\" , \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\" : \"Information\" } }, \"AllowedHosts\" : \"*\" , \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookSQLCache\" : \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;TrustServerCertificate=True\" } } ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS \u00b6 public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); } ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI \u00b6 ChinookSupervisor.cs \u00b6 public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } } ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED \u00b6 ChinookSupervisorTrack.cs \u00b6 public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $\"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel ?> GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $\"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel > ( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) trackApiModel . AlbumName = trackApiModel . Album . Title ; if ( trackApiModel . MediaType != null ) trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) trackApiModel . GenreName = trackApiModel . Genre . Name ; DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $\"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"Caching Data in your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#caching-data-in-your-api","text":"","title":"Caching Data in Your API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#start-from-previous-modules-end","text":"Developing the Web API Business Rules","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#response-caching","text":"","title":"RESPONSE CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-response-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); }","title":"ADD RESPONSE CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-configure-in-startupcs","text":"**** Note: needs to go after CORS** using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . AddConnectionProvider ( builder . Configuration ); builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor (); builder . Services . AddAPILogging (); builder . Services . AddCORS (); builder . Services . ConfigureValidators (); builder . Services . AddCaching ( builder . Configuration ); builder . Services . AddControllers (); var app = builder . Build (); // Configure the HTTP request pipeline. app . UseCors (); app . UseResponseCaching (); app . UseHttpsRedirection (); app . UseAuthorization (); app . MapControllers (); app . Run ();","title":"ADD TO CONFIGURE() IN STARTUP.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-to-controllers-or-actions","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ResponseCache(Duration = 604800)] public class GenreController : ControllerBase Note: 604800 is seconds and equals a week","title":"ADD TO CONTROLLERS OR ACTIONS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#what-is-seen-in-the-response-header","text":"Response Header: Cache-Control: public,max-age=604800 Test in Postman and web browser to see how the API Consumer behaves.","title":"What is seen in the Response Header"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#in-memory-caching","text":"","title":"IN-MEMORY CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingabstractions-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.Abstractions","title":"Install Microsoft.Extensions.Caching.Abstractions NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-in-memory-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); }","title":"ADD IN-MEMORY CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-memorycache-to-supervisor-and-get-from-di","text":"","title":"ADD MEMORYCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisoralbumcs","text":"public async Task < IEnumerable < AlbumApiModel >> GetAllAlbum () { List < Album > albums = await _albumRepository . GetAll (); var albumApiModels = albums . ConvertAll (); foreach ( var album in albumApiModels ) { var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , album . Id ), album , ( TimeSpan ) cacheEntryOptions ); } return albumApiModels ; } public async Task < AlbumApiModel ?> GetAlbumById ( int id ) { var albumApiModelCached = _cache . Get < AlbumApiModel > ( string . Concat ( \"Album-\" , id )); if ( albumApiModelCached != null ) { return albumApiModelCached ; } else { var album = await _albumRepository . GetById ( id ); if ( album == null ) return null ; var albumApiModel = album . Convert (); var result = ( _artistRepository . GetById ( album . ArtistId )). Result ; if ( result != null ) albumApiModel . ArtistName = result . Name ; albumApiModel . Tracks = ( await GetTrackByAlbumId ( id ) ?? Array . Empty < TrackApiModel > ()). ToList (); var cacheEntryOptions = new MemoryCacheEntryOptions (). SetSlidingExpiration ( TimeSpan . FromSeconds ( 604800 )) . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 604800 ); ; _cache . Set ( string . Concat ( \"Album-\" , albumApiModel . Id ), albumApiModel , ( TimeSpan ) cacheEntryOptions ); return albumApiModel ; } }","title":"ChinookSupervisorAlbum.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#distributed-caching","text":"","title":"DISTRIBUTED CACHING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-tool-for-mssql-distrubuted-caching-using-the-commend-in-command-prompt","text":"dotnet tool install --global dotnet-sql-cache","title":"Install tool for MSSQL distrubuted caching using the commend in Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#create-new-empty-database-chinookcachedb-in-mssql","text":"USE master ; GO CREATE DATABASE ChinookCacheDb ; GO -- Verify the database files and sizes SELECT name , size , size * 1 . 0 / 128 AS [ Size in MBs ] FROM sys . master_files WHERE name = N 'ChinookCacheDb' ; GO","title":"CREATE NEW EMPTY DATABASE ChinookCacheDb IN MSSQL"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#run-from-command-prompt","text":"dotnet sql-cache create \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;\" dbo ChinookCache","title":"Run from Command Prompt"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#install-microsoftextensionscachingsqlserver-nuget-package-to-domain","text":"dotnet add package Microsoft.Extensions.Caching.SqlServer","title":"Install Microsoft.Extensions.Caching.SqlServer NuGet package to Domain"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-chinooksqlcache-connectionstring-to-appsettings","text":"{ \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft.AspNetCore\" : \"Warning\" , \"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\" : \"Information\" } }, \"AllowedHosts\" : \"*\" , \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" , \"ChinookSQLCache\" : \"Data Source=.;Initial Catalog=ChinookCacheDb;Integrated Security=True;TrustServerCertificate=True\" } }","title":"ADD ChinookSQLCache CONNECTIONSTRING TO APPSETTINGS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributed-caching-to-addcaching-in-servicesconfigurationcs","text":"public static void AddCaching ( this IServiceCollection services , IConfiguration configuration ) { services . AddResponseCaching (); services . AddMemoryCache (); services . AddDistributedSqlServerCache ( options => { options . ConnectionString = configuration . GetConnectionString ( \"ChinookSQLCache\" ); options . SchemaName = \"dbo\" ; options . TableName = \"ChinookCache\" ; }); }","title":"ADD DISTRIBUTED CACHING TO ADDCACHING() IN SERVICESCONFIGURATION.CS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-distributedcache-to-supervisor-and-get-from-di","text":"","title":"ADD DISTRIBUTEDCACHE TO SUPERVISOR AND GET FROM DI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisorcs_1","text":"public partial class ChinookSupervisor : IChinookSupervisor { private readonly IAlbumRepository _albumRepository ; private readonly IArtistRepository _artistRepository ; private readonly ICustomerRepository _customerRepository ; private readonly IEmployeeRepository _employeeRepository ; private readonly IGenreRepository _genreRepository ; private readonly IInvoiceLineRepository _invoiceLineRepository ; private readonly IInvoiceRepository _invoiceRepository ; private readonly IMediaTypeRepository _mediaTypeRepository ; private readonly IPlaylistRepository _playlistRepository ; private readonly ITrackRepository _trackRepository ; private readonly IValidator < AlbumApiModel > _albumValidator ; private readonly IValidator < ArtistApiModel > _artistValidator ; private readonly IValidator < CustomerApiModel > _customerValidator ; private readonly IValidator < EmployeeApiModel > _employeeValidator ; private readonly IValidator < GenreApiModel > _genreValidator ; private readonly IValidator < InvoiceApiModel > _invoiceValidator ; private readonly IValidator < InvoiceLineApiModel > _invoiceLineValidator ; private readonly IValidator < MediaTypeApiModel > _mediaTypeValidator ; private readonly IValidator < PlaylistApiModel > _playlistValidator ; private readonly IValidator < TrackApiModel > _trackValidator ; private readonly IMemoryCache _cache ; private readonly IDistributedCache _distributedCache ; public ChinookSupervisor ( IAlbumRepository albumRepository , IArtistRepository artistRepository , ICustomerRepository customerRepository , IEmployeeRepository employeeRepository , IGenreRepository genreRepository , IInvoiceLineRepository invoiceLineRepository , IInvoiceRepository invoiceRepository , IMediaTypeRepository mediaTypeRepository , IPlaylistRepository playlistRepository , ITrackRepository trackRepository , IValidator < AlbumApiModel > albumValidator , IValidator < ArtistApiModel > artistValidator , IValidator < CustomerApiModel > customerValidator , IValidator < EmployeeApiModel > employeeValidator , IValidator < GenreApiModel > genreValidator , IValidator < InvoiceApiModel > invoiceValidator , IValidator < InvoiceLineApiModel > invoiceLineValidator , IValidator < MediaTypeApiModel > mediaTypeValidator , IValidator < PlaylistApiModel > playlistValidator , IValidator < TrackApiModel > trackValidator , IMemoryCache memoryCache , IDistributedCache distributedCache ) { _albumRepository = albumRepository ; _artistRepository = artistRepository ; _customerRepository = customerRepository ; _employeeRepository = employeeRepository ; _genreRepository = genreRepository ; _invoiceLineRepository = invoiceLineRepository ; _invoiceRepository = invoiceRepository ; _mediaTypeRepository = mediaTypeRepository ; _playlistRepository = playlistRepository ; _trackRepository = trackRepository ; _albumValidator = albumValidator ; _artistValidator = artistValidator ; _customerValidator = customerValidator ; _employeeValidator = employeeValidator ; _genreValidator = genreValidator ; _invoiceValidator = invoiceValidator ; _invoiceLineValidator = invoiceLineValidator ; _mediaTypeValidator = mediaTypeValidator ; _playlistValidator = playlistValidator ; _trackValidator = trackValidator ; _cache = memoryCache ; _distributedCache = distributedCache ; } }","title":"ChinookSupervisor.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#add-code-to-supervisor-for-each-entity-type-needed_1","text":"","title":"ADD CODE TO SUPERVISOR FOR EACH ENTITY TYPE NEEDED"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/caching-data/#chinooksupervisortrackcs","text":"public async Task < IEnumerable < TrackApiModel >> GetAllTrack () { List < Track > tracks = await _trackRepository . GetAll (); var trackApiModels = tracks . ConvertAll (); foreach ( var track in trackApiModels ) { DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $\"Track-{track.Id}\" , JsonSerializer . Serialize ( track ), cacheEntryOptions ); } return trackApiModels ; } public async Task < TrackApiModel ?> GetTrackById ( int id ) { var trackApiModelCached = await _distributedCache . GetStringAsync ( $\"Track-{id}\" ); if ( trackApiModelCached != null ) { return JsonSerializer . Deserialize < TrackApiModel > ( trackApiModelCached ); } else { var track = await _trackRepository . GetById ( id ); if ( track == null ) return null ; var trackApiModel = track . Convert (); trackApiModel . Genre = await GetGenreById ( trackApiModel . GenreId ); trackApiModel . Album = await GetAlbumById ( trackApiModel . AlbumId ); trackApiModel . MediaType = await GetMediaTypeById ( trackApiModel . MediaTypeId ); if ( trackApiModel . Album != null ) trackApiModel . AlbumName = trackApiModel . Album . Title ; if ( trackApiModel . MediaType != null ) trackApiModel . MediaTypeName = trackApiModel . MediaType . Name ; if ( trackApiModel . Genre != null ) trackApiModel . GenreName = trackApiModel . Genre . Name ; DistributedCacheEntryOptions cacheEntryOptions = new DistributedCacheEntryOptions (); cacheEntryOptions . SetSlidingExpiration ( TimeSpan . FromSeconds ( 3600 )); cacheEntryOptions . AbsoluteExpirationRelativeToNow = TimeSpan . FromSeconds ( 86400 ); await _distributedCache . SetStringAsync ( $\"Track-{track.Id}\" , JsonSerializer . Serialize ( trackApiModel ), cacheEntryOptions ); return trackApiModel ; } }","title":"ChinookSupervisorTrack.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/","text":"Designing the NTier API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Your First ASP.NET 7 Web API CREATE NEW PROJECTS FOR DATA AND DOMAIN \u00b6","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#designing-the-ntier-api","text":"","title":"Designing the NTier API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#start-from-previous-modules-end","text":"Your First ASP.NET 7 Web API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/designing-ntier-api/#create-new-projects-for-data-and-domain","text":"","title":"CREATE NEW PROJECTS FOR DATA AND DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/","text":"Documenting your API with OpenAPI \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Versioning your Web API ADD OPENAPI/SWAGGER NUGET PACKAGES TO API PROJECT \u00b6 dotnet add package Swashbuckle.AspNetCore.Swagger dotnet add package Swashbuckle.AspNetCore.SwaggerGen dotnet add package Swashbuckle.AspNetCore.SwaggerUI dotnet add package Swashbuckle.AspNetCore.Annotations ADD OPENAPI/SWAGGER TO STARTUP CONFIGURESERVICES \u00b6 ServicesConfiguration.cs \u00b6 public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen ( c => { c . SwaggerDoc ( \"v1\" , new OpenApiInfo { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }); c . EnableAnnotations (); }); } ADD OPENAPI/SWAGGER TO STARTUP \u00b6 builder . Services . AddSwaggerServices (); app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" )); DISCOVER THAT OUR SWAGGER SETUP DOES NOT WORK WITH OUR VERSIONING \u00b6 DECORATE EVERY VERSION 2.0 CONTROLLER ACTION ENDPOINT WITH VERSIONING \u00b6 [Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"2.0\" )] public class CustomerController : ControllerBase INSTALL APIEXPLORER NUGET PACKAGE IN API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer ADD APIEXPLORER TO SERVICES IN STARTUP \u00b6 ServicesConfiguration.cs \u00b6 public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); } ADD ConfigureSwaggerOptions AND MODIFY THE SWAGGER CODE TO DOCUMENT EACH VERSION'S SWAGGER FILE \u00b6 ServicesConfiguration.cs \u00b6 public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen (); services . ConfigureOptions < ConfigureSwaggerOptions > (); } public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); } Add ConfigureSwaggerOptions class to ServicesConfiguration.cs \u00b6 public class ConfigureSwaggerOptions : IConfigureNamedOptions < SwaggerGenOptions > { private readonly IApiVersionDescriptionProvider provider ; public ConfigureSwaggerOptions ( IApiVersionDescriptionProvider provider ) { this . provider = provider ; } public void Configure ( SwaggerGenOptions options ) { // add swagger document for every API version discovered foreach ( var description in provider . ApiVersionDescriptions ) { options . SwaggerDoc ( description . GroupName , CreateVersionInfo ( description )); options . EnableAnnotations (); } } public void Configure ( string name , SwaggerGenOptions options ) { Configure ( options ); } private OpenApiInfo CreateVersionInfo ( ApiVersionDescription description ) { var info = new OpenApiInfo () { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }; if ( description . IsDeprecated ) { info . Description += \" This API version has been deprecated.\" ; } return info ; } } ADD APIEXPLORER TO STARTUP \u00b6 builder . Services . AddApiExplorer (); builder . Services . AddSwaggerServices (); app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" )); CHANGE launchSettings.json IN PROPERTIES FOLDER TO LAUNCH SWAGGER ON RUN \u00b6 \"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } } } SWAGGER FOR V1 \u00b6 SWAGGER FOR V2 \u00b6 NOTE: Solution for versioning issues from @referbruv https://www.referbruv.com/blog/posts/integrating-aspnet-core-api-versions-with-swagger-ui","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#documenting-your-api-with-openapi","text":"","title":"Documenting your API with OpenAPI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#start-from-previous-modules-end","text":"Versioning your Web API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-nuget-packages-to-api-project","text":"dotnet add package Swashbuckle.AspNetCore.Swagger dotnet add package Swashbuckle.AspNetCore.SwaggerGen dotnet add package Swashbuckle.AspNetCore.SwaggerUI dotnet add package Swashbuckle.AspNetCore.Annotations","title":"ADD OPENAPI/SWAGGER NUGET PACKAGES TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-to-startup-configureservices","text":"","title":"ADD OPENAPI/SWAGGER TO STARTUP CONFIGURESERVICES"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs","text":"public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen ( c => { c . SwaggerDoc ( \"v1\" , new OpenApiInfo { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }); c . EnableAnnotations (); }); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-openapiswagger-to-startup","text":"builder . Services . AddSwaggerServices (); app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" ));","title":"ADD OPENAPI/SWAGGER TO STARTUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#discover-that-our-swagger-setup-does-not-work-with-our-versioning","text":"","title":"DISCOVER THAT OUR SWAGGER SETUP DOES NOT WORK WITH OUR VERSIONING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#decorate-every-version-20-controller-action-endpoint-with-versioning","text":"[Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"2.0\" )] public class CustomerController : ControllerBase","title":"DECORATE EVERY VERSION 2.0 CONTROLLER ACTION ENDPOINT WITH VERSIONING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#install-apiexplorer-nuget-package-in-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer","title":"INSTALL APIEXPLORER NUGET PACKAGE IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-apiexplorer-to-services-in-startup","text":"","title":"ADD APIEXPLORER TO SERVICES IN STARTUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs_1","text":"public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-configureswaggeroptions-and-modify-the-swagger-code-to-document-each-versions-swagger-file","text":"","title":"ADD ConfigureSwaggerOptions AND MODIFY THE SWAGGER CODE TO DOCUMENT EACH VERSION'S SWAGGER FILE"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#servicesconfigurationcs_2","text":"public static void AddSwaggerServices ( this IServiceCollection services ) { services . AddSwaggerGen (); services . ConfigureOptions < ConfigureSwaggerOptions > (); } public static void AddApiExplorer ( this IServiceCollection services ) { services . AddVersionedApiExplorer ( setup => { setup . GroupNameFormat = \"'v'VVV\" ; setup . SubstituteApiVersionInUrl = true ; }); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-configureswaggeroptions-class-to-servicesconfigurationcs","text":"public class ConfigureSwaggerOptions : IConfigureNamedOptions < SwaggerGenOptions > { private readonly IApiVersionDescriptionProvider provider ; public ConfigureSwaggerOptions ( IApiVersionDescriptionProvider provider ) { this . provider = provider ; } public void Configure ( SwaggerGenOptions options ) { // add swagger document for every API version discovered foreach ( var description in provider . ApiVersionDescriptions ) { options . SwaggerDoc ( description . GroupName , CreateVersionInfo ( description )); options . EnableAnnotations (); } } public void Configure ( string name , SwaggerGenOptions options ) { Configure ( options ); } private OpenApiInfo CreateVersionInfo ( ApiVersionDescription description ) { var info = new OpenApiInfo () { Version = \"v1\" , Title = \"Chinook Music Store API\" , Description = \"A simple example ASP.NET Core Web API\" , TermsOfService = new Uri ( \"https://example.com/terms\" ), Contact = new OpenApiContact { Name = \"Chris Woodruff\" , Email = string . Empty , Url = new Uri ( \"https://chriswoodruff.com\" ) }, License = new OpenApiLicense { Name = \"Use under MIT\" , Url = new Uri ( \"https://opensource.org/licenses/MIT\" ) } }; if ( description . IsDeprecated ) { info . Description += \" This API version has been deprecated.\" ; } return info ; } }","title":"Add ConfigureSwaggerOptions class to ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#add-apiexplorer-to-startup","text":"builder . Services . AddApiExplorer (); builder . Services . AddSwaggerServices (); app . UseSwagger (); app . UseSwaggerUI ( s => s . SwaggerEndpoint ( \"/swagger/v1/swagger.json\" , \"v1 docs\" ));","title":"ADD APIEXPLORER TO STARTUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#change-launchsettingsjson-in-properties-folder-to-launch-swagger-on-run","text":"\"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"swagger/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } } }","title":"CHANGE launchSettings.json IN PROPERTIES FOLDER TO LAUNCH SWAGGER ON RUN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#swagger-for-v1","text":"","title":"SWAGGER FOR V1"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/documenting-with-openapi/#swagger-for-v2","text":"NOTE: Solution for versioning issues from @referbruv https://www.referbruv.com/blog/posts/integrating-aspnet-core-api-versions-with-swagger-ui","title":"SWAGGER FOR V2"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/","text":"Identity in your Web API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Caching Data in Your API INSTALL NUGET PACKAGES TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore dotnet add package Microsoft.AspNetCore.Identity.UI INSTALL NUGET PACKAGE TO DATA PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore RESTORE UPDATED CHINOOK DB OR ADD IDENTITY TABLES TO EXISTING DB \u00b6 You can either restore a new database using a BAK file (if using MSSQL 2019) or run a SQL script if using older version of MSSQL. RESTORING UPDATED CHINOOK DB WITH BAK FILE \u00b6 Download the Chinook database BAK file for this part of the workshop in the GitHub repo. The file is a backup so we will restore it to where you have MSSQL 2019 installed. RUN SQL SCRIPT TO ADD IDENTITY TABLES TO EXISTING CHINOOK DB \u00b6 If you don't have MSSQL 2019 installed you can update your Chinook database by running this SQL script against your database to add the tables needed for Identity for this part of the workshop. UPDATE OUR APPSETTINGS.JSON IN API PROJECT \u00b6 Note: Will need to generate your new 32 character string. \"JwtConfig\" : { \"Secret\" : \"jkbflfzogupbyhypamekltpwkumodlfa\" }, ** No te : h tt ps : //www.random.org/string CREATE NEW CLASS IN CONFIGURATION FOLDER IN API PROJECT \u00b6 namespace ChinookASPNETWebAPI.API.Configurations { public class JwtConfig { public string Secret { get ; set ; } } } ADD IDENTITY AND JWT CODE TO STARTUP IN API PROJECT \u00b6 ServicesConfiguration.cs \u00b6 public static void AddIdentity ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < JwtConfig > ( configuration . GetSection ( \"JwtConfig\" )); services . AddAuthentication ( options => { options . DefaultAuthenticateScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = JwtBearerDefaults . AuthenticationScheme ; }) . AddJwtBearer ( jwt => { var key = Encoding . ASCII . GetBytes ( configuration [ \"JwtConfig:Secret\" ]); jwt . SaveToken = true ; jwt . TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true , IssuerSigningKey = new SymmetricSecurityKey ( key ), ValidateIssuer = false , ValidateAudience = false , RequireExpirationTime = false , ValidateLifetime = true }; }); services . AddDefaultIdentity < IdentityUser > ( options => options . SignIn . RequireConfirmedAccount = true ) . AddEntityFrameworkStores < ChinookContext > (); } ADD TO STARTUP CONFIGURE IN API PROJECT \u00b6 app . UseAuthentication (); Note : Add to very first line and has to be before app.UseAuthorization(); ADD NEW CLASSES FOR IDENTITY IN IDENTITY FOLDER IN DOMAIN PROJECT \u00b6 AuthResult.cs \u00b6 using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.Identity { public class AuthResult { public string Token { get ; set ;} public bool Result { get ; set ; } public List < string > Errors { get ; set ; } } } RegisterModel.cs \u00b6 using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class RegisterModel { [Required] public string Name { get ; set ; } [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } } RegistrationResponse.cs \u00b6 namespace ChinookASPNETWebAPI.Domain.Identity { public class RegistrationResponse : AuthResult { } } LoginModel.cs \u00b6 using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class LoginModel { [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } } UPDATE DBCONTEXT TO DESCEND FROM IDENTITYDBCONTEXT \u00b6 ADD REGISTER ACTION AND LOGIN ACTION TO HOME CONTROLLER IN API POJECT \u00b6 [Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class HomeController : ControllerBase { private readonly ILogger < HomeController > _logger ; private readonly UserManager < IdentityUser > _userManager ; private readonly JwtConfig _jwtConfig ; public HomeController ( ILogger < HomeController > logger , UserManager < IdentityUser > userManager , IOptionsMonitor < JwtConfig > optionsMonitor ) { _logger = logger ; _userManager = userManager ; _jwtConfig = optionsMonitor . CurrentValue ; } [HttpGet] public IActionResult Index () { return Ok (); } [HttpPost, Route(\"Register\")] public async Task < ActionResult < RegistrationResponse >> Register ([ FromBody ] RegisterModel user ) { // Check if the incoming request is valid if ( ModelState . IsValid ) { // check i the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser != null ) return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Email already exist\" } }); var newUser = new IdentityUser { Email = user . Email , UserName = user . Email }; var isCreated = await _userManager . CreateAsync ( newUser , user . Password ); if ( isCreated . Succeeded ) { var jwtToken = GenerateJwtToken ( newUser ); return Ok ( new RegistrationResponse { Result = true , Token = jwtToken }); } return new JsonResult ( new RegistrationResponse { Result = false , Errors = isCreated . Errors . Select ( x => x . Description ). ToList () } ) { StatusCode = 500 }; } return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Invalid payload\" } }); } [HttpPost, Route(\"Login\")] public async Task < ActionResult < RegistrationResponse >> Login ([ FromBody ] LoginModel user ) { if ( ModelState . IsValid ) { // check if the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser == null ) { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid authentication request\" } }); } // Now we need to check if the user has inputed the right password var isCorrect = await _userManager . CheckPasswordAsync ( existingUser , user . Password ); if ( isCorrect ) { var jwtToken = GenerateJwtToken ( existingUser ); return Ok ( new RegistrationResponse () { Result = true , Token = jwtToken }); } else { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid authentication request\" } }); } } return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid payload\" } }); } private string GenerateJwtToken ( IdentityUser user ) { // Now its ime to define the jwt token which will be responsible of creating our tokens var jwtTokenHandler = new JwtSecurityTokenHandler (); // We get our secret from the appsettings var key = Encoding . ASCII . GetBytes ( _jwtConfig . Secret ); // we define our token descriptor // We need to utilise claims which are properties in our token which gives information about the token // which belong to the specific user who it belongs to // so it could contain their id, name, email the good part is that these information // are generated by our server and identity framework which is valid and trusted var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity ( new [] { new Claim ( \"Id\" , user . Id ), new Claim ( JwtRegisteredClaimNames . Sub , user . Email ), new Claim ( JwtRegisteredClaimNames . Email , user . Email ), // the JTI is used for our refresh token which we will be convering in the next video new Claim ( JwtRegisteredClaimNames . Jti , Guid . NewGuid (). ToString ()) }), // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin // but since this is a demo app we can extend it to fit our current need Expires = DateTime . UtcNow . AddHours ( 6 ), // here we are adding the encryption alogorithim information which will be used to decrypt our token SigningCredentials = new SigningCredentials ( new SymmetricSecurityKey ( key ), SecurityAlgorithms . HmacSha512Signature ) }; var token = jwtTokenHandler . CreateToken ( tokenDescriptor ); var jwtToken = jwtTokenHandler . WriteToken ( token ); return jwtToken ; } } CALL IDENTITYDBCONTEXT ONMODELCREATING \u00b6 AUTHORIZE THE ALBUM CONTROLLER FOR IDENTITY IN API POJECT \u00b6 TEST IN POSTMAN \u00b6 Payload for Register Endpoint \u00b6 { \"name\" : \"Chris Woodruff\" , \"email\" : \"cwoodruff@live.com\" , \"password\" : \"p@ssw0rd\" } Login endpoint in Postman \u00b6 Results from Album GetAll Endpoint using Identity \u00b6","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#identity-in-your-web-api","text":"","title":"Identity in your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#start-from-previous-modules-end","text":"Caching Data in Your API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#install-nuget-packages-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore dotnet add package Microsoft.AspNetCore.Identity.UI","title":"INSTALL NUGET PACKAGES TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#install-nuget-package-to-data-project","text":"dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore","title":"INSTALL NUGET PACKAGE TO DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#restore-updated-chinook-db-or-add-identity-tables-to-existing-db","text":"You can either restore a new database using a BAK file (if using MSSQL 2019) or run a SQL script if using older version of MSSQL.","title":"RESTORE UPDATED CHINOOK DB OR ADD IDENTITY TABLES TO EXISTING DB"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#restoring-updated-chinook-db-with-bak-file","text":"Download the Chinook database BAK file for this part of the workshop in the GitHub repo. The file is a backup so we will restore it to where you have MSSQL 2019 installed.","title":"RESTORING UPDATED CHINOOK DB WITH BAK FILE"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#run-sql-script-to-add-identity-tables-to-existing-chinook-db","text":"If you don't have MSSQL 2019 installed you can update your Chinook database by running this SQL script against your database to add the tables needed for Identity for this part of the workshop.","title":"RUN SQL SCRIPT TO ADD IDENTITY TABLES TO EXISTING CHINOOK DB"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#update-our-appsettingsjson-in-api-project","text":"Note: Will need to generate your new 32 character string. \"JwtConfig\" : { \"Secret\" : \"jkbflfzogupbyhypamekltpwkumodlfa\" }, ** No te : h tt ps : //www.random.org/string","title":"UPDATE OUR APPSETTINGS.JSON IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#create-new-class-in-configuration-folder-in-api-project","text":"namespace ChinookASPNETWebAPI.API.Configurations { public class JwtConfig { public string Secret { get ; set ; } } }","title":"CREATE NEW CLASS IN CONFIGURATION FOLDER IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-identity-and-jwt-code-to-startup-in-api-project","text":"","title":"ADD IDENTITY AND JWT CODE TO STARTUP IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#servicesconfigurationcs","text":"public static void AddIdentity ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < JwtConfig > ( configuration . GetSection ( \"JwtConfig\" )); services . AddAuthentication ( options => { options . DefaultAuthenticateScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultScheme = JwtBearerDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = JwtBearerDefaults . AuthenticationScheme ; }) . AddJwtBearer ( jwt => { var key = Encoding . ASCII . GetBytes ( configuration [ \"JwtConfig:Secret\" ]); jwt . SaveToken = true ; jwt . TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true , IssuerSigningKey = new SymmetricSecurityKey ( key ), ValidateIssuer = false , ValidateAudience = false , RequireExpirationTime = false , ValidateLifetime = true }; }); services . AddDefaultIdentity < IdentityUser > ( options => options . SignIn . RequireConfirmedAccount = true ) . AddEntityFrameworkStores < ChinookContext > (); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-to-startup-configure-in-api-project","text":"app . UseAuthentication (); Note : Add to very first line and has to be before app.UseAuthorization();","title":"ADD TO STARTUP CONFIGURE IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-new-classes-for-identity-in-identity-folder-in-domain-project","text":"","title":"ADD NEW CLASSES FOR IDENTITY IN IDENTITY FOLDER IN DOMAIN PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#authresultcs","text":"using System.Collections.Generic ; namespace ChinookASPNETWebAPI.Domain.Identity { public class AuthResult { public string Token { get ; set ;} public bool Result { get ; set ; } public List < string > Errors { get ; set ; } } }","title":"AuthResult.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#registermodelcs","text":"using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class RegisterModel { [Required] public string Name { get ; set ; } [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } }","title":"RegisterModel.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#registrationresponsecs","text":"namespace ChinookASPNETWebAPI.Domain.Identity { public class RegistrationResponse : AuthResult { } }","title":"RegistrationResponse.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#loginmodelcs","text":"using System.ComponentModel.DataAnnotations ; namespace ChinookASPNETWebAPI.Domain.Identity { public class LoginModel { [Required] public string Email { get ; set ; } [Required] public string Password { get ; set ; } } }","title":"LoginModel.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#update-dbcontext-to-descend-from-identitydbcontext","text":"","title":"UPDATE DBCONTEXT TO DESCEND FROM IDENTITYDBCONTEXT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#add-register-action-and-login-action-to-home-controller-in-api-poject","text":"[Route(\"api/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] public class HomeController : ControllerBase { private readonly ILogger < HomeController > _logger ; private readonly UserManager < IdentityUser > _userManager ; private readonly JwtConfig _jwtConfig ; public HomeController ( ILogger < HomeController > logger , UserManager < IdentityUser > userManager , IOptionsMonitor < JwtConfig > optionsMonitor ) { _logger = logger ; _userManager = userManager ; _jwtConfig = optionsMonitor . CurrentValue ; } [HttpGet] public IActionResult Index () { return Ok (); } [HttpPost, Route(\"Register\")] public async Task < ActionResult < RegistrationResponse >> Register ([ FromBody ] RegisterModel user ) { // Check if the incoming request is valid if ( ModelState . IsValid ) { // check i the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser != null ) return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Email already exist\" } }); var newUser = new IdentityUser { Email = user . Email , UserName = user . Email }; var isCreated = await _userManager . CreateAsync ( newUser , user . Password ); if ( isCreated . Succeeded ) { var jwtToken = GenerateJwtToken ( newUser ); return Ok ( new RegistrationResponse { Result = true , Token = jwtToken }); } return new JsonResult ( new RegistrationResponse { Result = false , Errors = isCreated . Errors . Select ( x => x . Description ). ToList () } ) { StatusCode = 500 }; } return BadRequest ( new RegistrationResponse { Result = false , Errors = new List < string > { \"Invalid payload\" } }); } [HttpPost, Route(\"Login\")] public async Task < ActionResult < RegistrationResponse >> Login ([ FromBody ] LoginModel user ) { if ( ModelState . IsValid ) { // check if the user with the same email exist var existingUser = await _userManager . FindByEmailAsync ( user . Email ); if ( existingUser == null ) { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid authentication request\" } }); } // Now we need to check if the user has inputed the right password var isCorrect = await _userManager . CheckPasswordAsync ( existingUser , user . Password ); if ( isCorrect ) { var jwtToken = GenerateJwtToken ( existingUser ); return Ok ( new RegistrationResponse () { Result = true , Token = jwtToken }); } else { // We dont want to give to much information on why the request has failed for security reasons return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid authentication request\" } }); } } return BadRequest ( new RegistrationResponse () { Result = false , Errors = new List < string > () { \"Invalid payload\" } }); } private string GenerateJwtToken ( IdentityUser user ) { // Now its ime to define the jwt token which will be responsible of creating our tokens var jwtTokenHandler = new JwtSecurityTokenHandler (); // We get our secret from the appsettings var key = Encoding . ASCII . GetBytes ( _jwtConfig . Secret ); // we define our token descriptor // We need to utilise claims which are properties in our token which gives information about the token // which belong to the specific user who it belongs to // so it could contain their id, name, email the good part is that these information // are generated by our server and identity framework which is valid and trusted var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity ( new [] { new Claim ( \"Id\" , user . Id ), new Claim ( JwtRegisteredClaimNames . Sub , user . Email ), new Claim ( JwtRegisteredClaimNames . Email , user . Email ), // the JTI is used for our refresh token which we will be convering in the next video new Claim ( JwtRegisteredClaimNames . Jti , Guid . NewGuid (). ToString ()) }), // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin // but since this is a demo app we can extend it to fit our current need Expires = DateTime . UtcNow . AddHours ( 6 ), // here we are adding the encryption alogorithim information which will be used to decrypt our token SigningCredentials = new SigningCredentials ( new SymmetricSecurityKey ( key ), SecurityAlgorithms . HmacSha512Signature ) }; var token = jwtTokenHandler . CreateToken ( tokenDescriptor ); var jwtToken = jwtTokenHandler . WriteToken ( token ); return jwtToken ; } }","title":"ADD REGISTER ACTION AND LOGIN ACTION TO HOME CONTROLLER IN API POJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#call-identitydbcontext-onmodelcreating","text":"","title":"CALL IDENTITYDBCONTEXT ONMODELCREATING"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#authorize-the-album-controller-for-identity-in-api-poject","text":"","title":"AUTHORIZE THE ALBUM CONTROLLER FOR IDENTITY IN API POJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#test-in-postman","text":"","title":"TEST IN POSTMAN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#payload-for-register-endpoint","text":"{ \"name\" : \"Chris Woodruff\" , \"email\" : \"cwoodruff@live.com\" , \"password\" : \"p@ssw0rd\" }","title":"Payload for Register Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#login-endpoint-in-postman","text":"","title":"Login endpoint in Postman"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/identity/#results-from-album-getall-endpoint-using-identity","text":"","title":"Results from Album GetAll Endpoint using Identity"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/","text":"Developing the API endpoints \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Developing the API Data access ADD APIMODELS TO DOMAIN \u00b6 namespace ChinookASPNETWebAPI.Domain.ApiModels ; public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } } ADD IConvertModel TO DOMAIN \u00b6 namespace Chinook.Domain.Converters ; public interface IConvertModel < out TTarget > { TTarget Convert (); } ADD ConvertExtensions TO DOMAIN \u00b6 using Chinook.Domain.Converters ; namespace Chinook.Domain.Extensions ; public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TTarget > ( this IEnumerable < IConvertModel < TTarget >> values ) => values . Select ( value => value . Convert ()); } ADD CONVERT CODE APIMODELS IN DOMAIN \u00b6 using Chinook.Domain.Converters ; using Chinook.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels ; public class AlbumApiModel : IConvertModel < Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; } ADD CONVERT CODE ENTITIES IN DOMAIN \u00b6 using Chinook.Domain.Converters ; using ChinookASPNETWebAPI.Domain.ApiModels ; namespace Chinook.Domain.Entities ; public partial class Album : IConvertModel < AlbumApiModel > { public Album () { Tracks = new HashSet < Track > (); } public int Id { get ; set ; } public string Title { get ; set ; } = null ! ; public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } = null ! ; public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; } ADD SUPERVISOR TO DOMAIN \u00b6 Take a look at the code here for the logic of the Supervisor ADD APPSETTINGS TO API PROJECT \u00b6 ADD SERVICESCONFIGURATION TO API PROJECT \u00b6 using Chinook.Domain.Repositories ; using Chinook.Domain.Supervisor ; using Chinook.Data.Repositories ; namespace Chinook.API.Configurations ; public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository > () . AddScoped < IArtistRepository , ArtistRepository > () . AddScoped < ICustomerRepository , CustomerRepository > () . AddScoped < IEmployeeRepository , EmployeeRepository > () . AddScoped < IGenreRepository , GenreRepository > () . AddScoped < IInvoiceRepository , InvoiceRepository > () . AddScoped < IInvoiceLineRepository , InvoiceLineRepository > () . AddScoped < IMediaTypeRepository , MediaTypeRepository > () . AddScoped < IPlaylistRepository , PlaylistRepository > () . AddScoped < ITrackRepository , TrackRepository > (); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor > (); } } ADD ConfigureRepositories() AND ConfigureSupervisor() TO CONFIGURESERVICES IN API PROJECT \u00b6 builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor (); ADD CONTROLLERS TO API \u00b6 ADD ACTIONS TO CONTROLLERS \u00b6 using System.Net ; using Chinook.Domain.ApiModels ; using Chinook.Domain.Supervisor ; using Microsoft.AspNetCore.Mvc ; namespace Chinook.API.Controllers ; //[Authorize] [Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } } ADD LOGGING TO API PROJECT \u00b6 public static void AddAPILogging ( this IServiceCollection services ) { services . AddLogging ( builder => builder . AddConsole () . AddFilter ( level => level >= LogLevel . Information ) ); services . AddHttpLogging ( logging => { // Customize HTTP logging. logging . LoggingFields = HttpLoggingFields . All ; logging . RequestHeaders . Add ( \"My-Request-Header\" ); logging . ResponseHeaders . Add ( \"My-Response-Header\" ); logging . MediaTypeOptions . AddText ( \"application/javascript\" ); logging . RequestBodyLogLimit = 4096 ; logging . ResponseBodyLogLimit = 4096 ; }); } ADD ConfigureRepositories() AND ConfigureSupervisor() TO CONFIGURESERVICES IN API PROJECT \u00b6 builder . Services . AddAPILogging (); CHANGE LAUNCHSETTINGS \u00b6 { \"$schema\" : \"https://json.schemastore.org/launchsettings.json\" , \"iisSettings\" : { \"windowsAuthentication\" : false , \"anonymousAuthentication\" : true , \"iisExpress\" : { \"applicationUrl\" : \"http://localhost:46460\" , \"sslPort\" : 44369 } }, \"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"api/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"api/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } } } }","title":"Developing the API Endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#developing-the-api-endpoints","text":"","title":"Developing the API endpoints"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#start-from-previous-modules-end","text":"Developing the API Data access","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-apimodels-to-domain","text":"namespace ChinookASPNETWebAPI.Domain.ApiModels ; public class AlbumApiModel { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } }","title":"ADD APIMODELS TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-iconvertmodel-to-domain","text":"namespace Chinook.Domain.Converters ; public interface IConvertModel < out TTarget > { TTarget Convert (); }","title":"ADD IConvertModel TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convertextensions-to-domain","text":"using Chinook.Domain.Converters ; namespace Chinook.Domain.Extensions ; public static class ConvertExtensions { public static IEnumerable < TTarget > ConvertAll < TTarget > ( this IEnumerable < IConvertModel < TTarget >> values ) => values . Select ( value => value . Convert ()); }","title":"ADD ConvertExtensions TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-apimodels-in-domain","text":"using Chinook.Domain.Converters ; using Chinook.Domain.Entities ; namespace ChinookASPNETWebAPI.Domain.ApiModels ; public class AlbumApiModel : IConvertModel < Album > { public int Id { get ; set ; } public string Title { get ; set ; } public int ArtistId { get ; set ; } public string ArtistName { get ; set ; } public ArtistApiModel Artist { get ; set ; } public IList < TrackApiModel > Tracks { get ; set ; } public Album Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title ?? string . Empty }; }","title":"ADD CONVERT CODE APIMODELS IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-convert-code-entities-in-domain","text":"using Chinook.Domain.Converters ; using ChinookASPNETWebAPI.Domain.ApiModels ; namespace Chinook.Domain.Entities ; public partial class Album : IConvertModel < AlbumApiModel > { public Album () { Tracks = new HashSet < Track > (); } public int Id { get ; set ; } public string Title { get ; set ; } = null ! ; public int ArtistId { get ; set ; } public virtual Artist Artist { get ; set ; } = null ! ; public virtual ICollection < Track > Tracks { get ; set ; } public AlbumApiModel Convert () => new () { Id = Id , ArtistId = ArtistId , Title = Title }; }","title":"ADD CONVERT CODE ENTITIES IN DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-supervisor-to-domain","text":"Take a look at the code here for the logic of the Supervisor","title":"ADD SUPERVISOR TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-appsettings-to-api-project","text":"","title":"ADD APPSETTINGS TO  API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-servicesconfiguration-to-api-project","text":"using Chinook.Domain.Repositories ; using Chinook.Domain.Supervisor ; using Chinook.Data.Repositories ; namespace Chinook.API.Configurations ; public static class ServicesConfiguration { public static void ConfigureRepositories ( this IServiceCollection services ) { services . AddScoped < IAlbumRepository , AlbumRepository > () . AddScoped < IArtistRepository , ArtistRepository > () . AddScoped < ICustomerRepository , CustomerRepository > () . AddScoped < IEmployeeRepository , EmployeeRepository > () . AddScoped < IGenreRepository , GenreRepository > () . AddScoped < IInvoiceRepository , InvoiceRepository > () . AddScoped < IInvoiceLineRepository , InvoiceLineRepository > () . AddScoped < IMediaTypeRepository , MediaTypeRepository > () . AddScoped < IPlaylistRepository , PlaylistRepository > () . AddScoped < ITrackRepository , TrackRepository > (); } public static void ConfigureSupervisor ( this IServiceCollection services ) { services . AddScoped < IChinookSupervisor , ChinookSupervisor > (); } }","title":"ADD SERVICESCONFIGURATION TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-configurerepositories-and-configuresupervisor-to-configureservices-in-api-project","text":"builder . Services . ConfigureRepositories (); builder . Services . ConfigureSupervisor ();","title":"ADD ConfigureRepositories() AND ConfigureSupervisor() TO CONFIGURESERVICES IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-controllers-to-api","text":"","title":"ADD CONTROLLERS TO API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-actions-to-controllers","text":"using System.Net ; using Chinook.Domain.ApiModels ; using Chinook.Domain.Supervisor ; using Microsoft.AspNetCore.Mvc ; namespace Chinook.API.Controllers ; //[Authorize] [Route(\"api/[controller] \")] [ApiController] public class AlbumController : ControllerBase { private readonly IChinookSupervisor _chinookSupervisor ; private readonly ILogger < AlbumController > _logger ; public AlbumController ( IChinookSupervisor chinookSupervisor , ILogger < AlbumController > logger ) { _chinookSupervisor = chinookSupervisor ; _logger = logger ; } [HttpGet] [Produces(typeof(List<AlbumApiModel>))] public async Task < ActionResult < List < AlbumApiModel >>> Get () { var albums = await _chinookSupervisor . GetAllAlbum (); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found\" ); } } [HttpGet(\"{id}\", Name = \"GetAlbumById\")] public async Task < ActionResult < AlbumApiModel >> Get ( int id ) { var album = await _chinookSupervisor . GetAlbumById ( id ); if ( album != null ) { return Ok ( album ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"Album Not Found\" ); } } [HttpPost] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Post ([ FromBody ] AlbumApiModel input ) { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . AddAlbum ( input )); } } [HttpPut(\"{id}\")] [Produces(\"application/json\")] [Consumes(\"application/json\")] public async Task < ActionResult < AlbumApiModel >> Put ( int id , [ FromBody ] AlbumApiModel input ) { if ( input == null ) { return StatusCode (( int ) HttpStatusCode . BadRequest , \"Given Album is null\" ); } else { return Ok ( await _chinookSupervisor . UpdateAlbum ( input )); } } [HttpDelete(\"{id}\")] public async Task < ActionResult > Delete ( int id ) { return Ok ( await _chinookSupervisor . DeleteAlbum ( id )); } [HttpGet(\"artist/{id}\")] public async Task < ActionResult < List < AlbumApiModel >>> GetByArtistId ( int id ) { var albums = await _chinookSupervisor . GetAlbumByArtistId ( id ); if ( albums . Any ()) { return Ok ( albums ); } else { return StatusCode (( int ) HttpStatusCode . NotFound , \"No Albums Could Be Found for the Artist\" ); } } }","title":"ADD ACTIONS TO CONTROLLERS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-logging-to-api-project","text":"public static void AddAPILogging ( this IServiceCollection services ) { services . AddLogging ( builder => builder . AddConsole () . AddFilter ( level => level >= LogLevel . Information ) ); services . AddHttpLogging ( logging => { // Customize HTTP logging. logging . LoggingFields = HttpLoggingFields . All ; logging . RequestHeaders . Add ( \"My-Request-Header\" ); logging . ResponseHeaders . Add ( \"My-Response-Header\" ); logging . MediaTypeOptions . AddText ( \"application/javascript\" ); logging . RequestBodyLogLimit = 4096 ; logging . ResponseBodyLogLimit = 4096 ; }); }","title":"ADD LOGGING TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#add-configurerepositories-and-configuresupervisor-to-configureservices-in-api-project_1","text":"builder . Services . AddAPILogging ();","title":"ADD ConfigureRepositories() AND ConfigureSupervisor() TO CONFIGURESERVICES IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-api-endpoints/#change-launchsettings","text":"{ \"$schema\" : \"https://json.schemastore.org/launchsettings.json\" , \"iisSettings\" : { \"windowsAuthentication\" : false , \"anonymousAuthentication\" : true , \"iisExpress\" : { \"applicationUrl\" : \"http://localhost:46460\" , \"sslPort\" : 44369 } }, \"profiles\" : { \"Chinook.API\" : { \"commandName\" : \"Project\" , \"dotnetRunMessages\" : true , \"launchBrowser\" : true , \"launchUrl\" : \"api/\" , \"applicationUrl\" : \"https://localhost:7211;http://localhost:5211\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } }, \"IIS Express\" : { \"commandName\" : \"IISExpress\" , \"launchBrowser\" : true , \"launchUrl\" : \"api/\" , \"environmentVariables\" : { \"ASPNETCORE_ENVIRONMENT\" : \"Development\" } } } }","title":"CHANGE LAUNCHSETTINGS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/","text":"Developing the API Data access \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Designing the NTier API ADD PROJECT REFERENCE FOR API PROJECT \u00b6 ADD PROJECT REFERENCE FOR DATA PROJECT \u00b6 INSTALL OR UPDATE THR EF CORE CLI \u00b6 dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef ADD NUGET PACKAGES TO DATA PROJECT \u00b6 dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE IN DATA PROJECT \u00b6 Run the following command in Developer Command Prompt inside the Data project dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities MOVE ENTITIES IN DATA PROJECT TO DOMAIN \u00b6 Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain ADD REPOSITORY INTERFACES TO DOMAIN \u00b6 using Chinook.Domain.Entities ; namespace Chinook.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } } ADD REPOSITORIES TO DATA \u00b6 using Chinook.Data.Data ; using Chinook.Domain.Entities ; using Chinook.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace Chinook.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if ( ! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if ( ! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } } ADD CONFIGURATIONS FOLDER to API PROJECT \u00b6 ADD CONNECTIONSTRING TO APPSETTINGS.JSON \u00b6 \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, ADD APPSETTINGS TO API PROJECT IN CONFIGURATIONS FOLDER \u00b6 namespace Chinook.API.Configurations ; public abstract class AppSettings { } ADD CONFIGUREAPPSETTINGS TO API PROJECT \u00b6 CONFIGUREAPPSETTINGS CLASS IN CONFIGURATIONS FOLDER \u00b6 using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace Chinook.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings > ( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } } ADD AddAppSettings TO PROGRAM.CS IN API PROJECT \u00b6 using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . AddControllers (); ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT \u00b6 using System.Runtime.InteropServices ; using Microsoft.Data.SqlClient ; using Microsoft.EntityFrameworkCore ; using Chinook.Data.Data ; namespace Chinook.API.Configurations ; public static class ConfigureConnections { public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ); else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ); services . AddDbContextPool < ChinookContext > ( options => options . UseSqlServer ( connection )); services . AddSingleton ( new SqlConnection ( connection )); return services ; } } CALL ADDCONNECTIONPROVIDER() IN CONFIGURESERVICES IN API PROJECT'S StartUP \u00b6 builder . Services . AddConnectionProvider ( builder . Configuration ); REMOVE ONCONFIGURING() FROM DBCONTEXT \u00b6 REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER \u00b6 REMOVE CLASS.CS FILES FROM DATA AND DOMAIN PROJECTS \u00b6","title":"Developing Data Access for your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#developing-the-api-data-access","text":"","title":"Developing the API Data access"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#start-from-previous-modules-end","text":"Designing the NTier API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-api-project","text":"","title":"ADD PROJECT REFERENCE FOR API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-project-reference-for-data-project","text":"","title":"ADD PROJECT REFERENCE FOR DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#install-or-update-thr-ef-core-cli","text":"dotnet tool install --global dotnet-ef dotnet tool update --global dotnet-ef","title":"INSTALL OR UPDATE THR EF CORE CLI"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-nuget-packages-to-data-project","text":"dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Design","title":"ADD NUGET PACKAGES TO DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#scaffold-dbcontext-and-entities-from-chinook-database-in-data-project","text":"Run the following command in Developer Command Prompt inside the Data project dotnet ef dbcontext scaffold \"Server=.;Database=Chinook;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer --context-dir Data --output-dir Entities","title":"SCAFFOLD DBCONTEXT AND ENTITIES FROM CHINOOK DATABASE IN DATA PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#move-entities-in-data-project-to-domain","text":"Adjust the namespace for the Entities Add using reference in DBContext to Entities in Domain","title":"MOVE ENTITIES IN DATA PROJECT TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repository-interfaces-to-domain","text":"using Chinook.Domain.Entities ; namespace Chinook.Domain.Repositories { public interface IAlbumRepository : IDisposable { Task < List < Album >> GetAll (); Task < Album > GetById ( int id ); Task < List < Album >> GetByArtistId ( int id ); Task < Album > Add ( Album newAlbum ); Task < bool > Update ( Album album ); Task < bool > Delete ( int id ); } }","title":"ADD REPOSITORY INTERFACES TO DOMAIN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-repositories-to-data","text":"using Chinook.Data.Data ; using Chinook.Domain.Entities ; using Chinook.Domain.Repositories ; using Microsoft.EntityFrameworkCore ; namespace Chinook.Data.Repositories { public class AlbumRepository : IAlbumRepository { private readonly ChinookContext _context ; public AlbumRepository ( ChinookContext context ) { _context = context ; } private async Task < bool > AlbumExists ( int id ) => await _context . Albums . AnyAsync ( a => a . Id == id ); public void Dispose () => _context . Dispose (); public async Task < List < Album >> GetAll () => await _context . Albums . AsNoTrackingWithIdentityResolution (). ToListAsync (); public async Task < Album > GetById ( int id ) { var dbAlbum = await _context . Albums . FindAsync ( id ); return dbAlbum ; } public async Task < Album > Add ( Album newAlbum ) { await _context . Albums . AddAsync ( newAlbum ); await _context . SaveChangesAsync (); return newAlbum ; } public async Task < bool > Update ( Album album ) { if ( ! await AlbumExists ( album . Id )) return false ; _context . Albums . Update ( album ); await _context . SaveChangesAsync (); return true ; } public async Task < bool > Delete ( int id ) { if ( ! await AlbumExists ( id )) return false ; var toRemove = await _context . Albums . FindAsync ( id ); _context . Albums . Remove ( toRemove ); await _context . SaveChangesAsync (); return true ; } public async Task < List < Album >> GetByArtistId ( int id ) => await _context . Albums . Where ( a => a . ArtistId == id ). AsNoTrackingWithIdentityResolution (). ToListAsync (); } }","title":"ADD REPOSITORIES TO DATA"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-configurations-folder-to-api-project","text":"","title":"ADD CONFIGURATIONS FOLDER to API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-connectionstring-to-appsettingsjson","text":"\"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" },","title":"ADD CONNECTIONSTRING TO APPSETTINGS.JSON"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-appsettings-to-api-project-in-configurations-folder","text":"namespace Chinook.API.Configurations ; public abstract class AppSettings { }","title":"ADD APPSETTINGS TO API PROJECT IN CONFIGURATIONS FOLDER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-configureappsettings-to-api-project","text":"","title":"ADD CONFIGUREAPPSETTINGS TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#configureappsettings-class-in-configurations-folder","text":"using Microsoft.Extensions.Configuration ; using Microsoft.Extensions.DependencyInjection ; namespace Chinook.API.Configurations { public static class ConfigureAppSettings { public static IServiceCollection AddAppSettings ( this IServiceCollection services , IConfiguration configuration ) { services . Configure < AppSettings > ( _ => configuration . GetSection ( \"AppSettings\" ). Bind ( _ )); return services ; } } }","title":"CONFIGUREAPPSETTINGS CLASS IN CONFIGURATIONS FOLDER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-addappsettings-to-programcs-in-api-project","text":"using Chinook.API.Configurations ; var builder = WebApplication . CreateBuilder ( args ); builder . Services . AddAppSettings ( builder . Configuration ); builder . Services . AddControllers ();","title":"ADD AddAppSettings TO PROGRAM.CS IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#add-dbcontext-to-dependancy-injection-in-api-project","text":"using System.Runtime.InteropServices ; using Microsoft.Data.SqlClient ; using Microsoft.EntityFrameworkCore ; using Chinook.Data.Data ; namespace Chinook.API.Configurations ; public static class ConfigureConnections { public static IServiceCollection AddConnectionProvider ( this IServiceCollection services , IConfiguration configuration ) { var connection = String . Empty ; if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Windows )) connection = configuration . GetConnectionString ( \"ChinookDbWindows\" ); else if ( RuntimeInformation . IsOSPlatform ( OSPlatform . Linux ) || RuntimeInformation . IsOSPlatform ( OSPlatform . OSX )) connection = configuration . GetConnectionString ( \"ChinookDbDocker\" ); services . AddDbContextPool < ChinookContext > ( options => options . UseSqlServer ( connection )); services . AddSingleton ( new SqlConnection ( connection )); return services ; } }","title":"ADD DBCONTEXT TO DEPENDANCY INJECTION IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#call-addconnectionprovider-in-configureservices-in-api-projects-startup","text":"builder . Services . AddConnectionProvider ( builder . Configuration );","title":"CALL ADDCONNECTIONPROVIDER() IN CONFIGURESERVICES IN API PROJECT'S StartUP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-onconfiguring-from-dbcontext","text":"","title":"REMOVE ONCONFIGURING() FROM DBCONTEXT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-the-dbcontext-constructor-wo-a-parameter","text":"","title":"REMOVE THE DBCONTEXT CONSTRUCTOR W/O A PARAMETER"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/ntier-data-access/#remove-classcs-files-from-data-and-domain-projects","text":"","title":"REMOVE CLASS.CS FILES FROM DATA AND DOMAIN PROJECTS"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/","text":"Versioning your Web API \u00b6 START FROM PREVIOUS MODULE'S END \u00b6 Identity in your Web API ADD VERSIONING NUGET PACKAGE TO API PROJECT \u00b6 dotnet add package Microsoft.AspNetCore.Mvc.Versioning ADD API VERSIONING TO STARTUP IN API PROJECT \u00b6 builder . Services . AddVersioning (); ADD VERSIONING TO ServicesConfiguration IN API PROJECT \u00b6 ServicesConfiguration.cs \u00b6 public static void AddVersioning ( this IServiceCollection services ) { services . AddApiVersioning ( options => { options . AssumeDefaultVersionWhenUnspecified = true ; options . DefaultApiVersion = new ApiVersion ( 1 , 0 ); //options.DefaultApiVersion = new ApiVersion( new DateTime( 2020, 9, 22 ) ); //options.DefaultApiVersion = // new ApiVersion(new DateTime( 2020, 9, 22 ), \"LetoII\", 1, \"Beta\"); options . ReportApiVersions = true ; //options.ApiVersionReader = new HeaderApiVersionReader(\"api-version\"); }); } ADD NEW CUSTOMER CONTROLLER FOR VERSION 2 \u00b6 [Route(\"api/v{version:apiVersion}/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion(\"2.0\")] public class CustomerController : ControllerBase MODIFY CUSTOMER V1 CONTROLLER FOR VERSIONING IN API PROJECT \u00b6 [Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\", Deprecated = true)] public class CustomerController : ControllerBase TEST IN POSTMAN \u00b6 Version 1 Endpoint \u00b6 https://localhost:44320/api/v1/Customer Version 2 Endpoint \u00b6 https://localhost:44320/api/v2/Customer","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#versioning-your-web-api","text":"","title":"Versioning your Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#start-from-previous-modules-end","text":"Identity in your Web API","title":"START FROM PREVIOUS MODULE'S END"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-versioning-nuget-package-to-api-project","text":"dotnet add package Microsoft.AspNetCore.Mvc.Versioning","title":"ADD VERSIONING NUGET PACKAGE TO API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-api-versioning-to-startup-in-api-project","text":"builder . Services . AddVersioning ();","title":"ADD API VERSIONING TO STARTUP IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-versioning-to-servicesconfiguration-in-api-project","text":"","title":"ADD VERSIONING TO ServicesConfiguration IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#servicesconfigurationcs","text":"public static void AddVersioning ( this IServiceCollection services ) { services . AddApiVersioning ( options => { options . AssumeDefaultVersionWhenUnspecified = true ; options . DefaultApiVersion = new ApiVersion ( 1 , 0 ); //options.DefaultApiVersion = new ApiVersion( new DateTime( 2020, 9, 22 ) ); //options.DefaultApiVersion = // new ApiVersion(new DateTime( 2020, 9, 22 ), \"LetoII\", 1, \"Beta\"); options . ReportApiVersions = true ; //options.ApiVersionReader = new HeaderApiVersionReader(\"api-version\"); }); }","title":"ServicesConfiguration.cs"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#add-new-customer-controller-for-version-2","text":"[Route(\"api/v{version:apiVersion}/[controller] \")] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion(\"2.0\")] public class CustomerController : ControllerBase","title":"ADD NEW CUSTOMER CONTROLLER FOR VERSION 2"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#modify-customer-v1-controller-for-versioning-in-api-project","text":"[Route( \"api/v{version:apiVersion}/[controller] \" )] [ApiController] [EnableCors(\"CorsPolicy\")] [ApiVersion( \"1.0\", Deprecated = true)] public class CustomerController : ControllerBase","title":"MODIFY CUSTOMER V1 CONTROLLER FOR VERSIONING IN API PROJECT"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#test-in-postman","text":"","title":"TEST IN POSTMAN"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#version-1-endpoint","text":"https://localhost:44320/api/v1/Customer","title":"Version 1 Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/versioning/#version-2-endpoint","text":"https://localhost:44320/api/v2/Customer","title":"Version 2 Endpoint"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/","text":"What is a API? \u00b6 In computer programming, an application programming interface (API) is a set of subroutine definitions, protocols, and tools for building software and applications. So what is a Web API? \u00b6 Ideal for building RESTful services Supports HTTP Uses HTTP Requests and Responses Maps to HTTP verbs","title":"What is a Web API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/#what-is-a-api","text":"In computer programming, an application programming interface (API) is a set of subroutine definitions, protocols, and tools for building software and applications.","title":"What is a API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-a-web-api/#so-what-is-a-web-api","text":"Ideal for building RESTful services Supports HTTP Uses HTTP Requests and Responses Maps to HTTP verbs","title":"So what is a Web API?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/","text":"What is REST? \u00b6 What you need to know about HTTP \u00b6 HTTP Methods or Verbs Request Header Request Body Response Codes Response Header Response Body","title":"What is REST?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/#what-is-rest","text":"","title":"What is REST?"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/what-is-rest/#what-you-need-to-know-about-http","text":"HTTP Methods or Verbs Request Header Request Body Response Codes Response Header Response Body","title":"What you need to know about HTTP"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/","text":"Your First ASP.NET 7 Web API \u00b6 Create a new ASP.NET Core Web API solution and project \u00b6 Configure the Solution and API Project for Workshop \u00b6 Solution name is Chinook Project name is Chinook.API Set Details for the Solution and API Project \u00b6 Target Framework is .NET 7.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False A View of the Solution and API Project \u00b6 Results when you run the API Project \u00b6 Note -- I use a JSON Formatter in Chrome to make the Results look good. Delete the Existing Files in API Project \u00b6 Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Your first ASP.NET Core Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#your-first-aspnet-7-web-api","text":"","title":"Your First ASP.NET 7 Web API"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#create-a-new-aspnet-core-web-api-solution-and-project","text":"","title":"Create a new ASP.NET Core Web API solution and project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#configure-the-solution-and-api-project-for-workshop","text":"Solution name is Chinook Project name is Chinook.API","title":"Configure the Solution and API Project for Workshop"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#set-details-for-the-solution-and-api-project","text":"Target Framework is .NET 7.0 Authentication Type is None Set Configure for HTTPS to True Set Enable Docker to False Set Enable OpenAPI support to False","title":"Set Details for the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#a-view-of-the-solution-and-api-project","text":"","title":"A View of the Solution and API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#results-when-you-run-the-api-project","text":"Note -- I use a JSON Formatter in Chrome to make the Results look good.","title":"Results when you run the API Project"},{"location":"Standing%20Up%20an%20ASP.NET%20Core%20Web%20API/your-first-aspnet-core-web-api/#delete-the-existing-files-in-api-project","text":"Delete the following files in API project: * WeatherForcastController.cs * WeatherForcast.cs","title":"Delete the Existing Files in API Project"},{"location":"Testing%20Your%20AP/integration-testing/","text":"Creating and using Integrating Testing for your API \u00b6 OPEN SOLUTION (BEFORE PAGING MODULE) IN THE TESTING MODULE FOR INTEGRATION TESTING \u00b6 \\aspnet-7-web-api-workshop\\module-2\\02-02 Creating and using Integrating Testing for your Web API\\testing EXPLORER THE ChinookASPNETWebAPI.IntegrationTest PROJECT AND UNDERSTAND THE TESTS \u00b6 This will give you a good insight into how to create unit tests for different components of your Web API MODIFY THE PROGRAM FILE IN API PROJECT \u00b6 If you get an error that testhost.deps.json is missing then add the following to your API project's Program.cs public partial class Program { } CREATE ADDITIONAL INTEGRATION TESTS \u00b6 Using the existing integration tests for the Album as a guide, build more integration tests for some of the other models in the solution. [Theory] [InlineData(\"GET\")] public async void AlbumGetAllTest ( string method ) { // Arrange var request = new HttpRequestMessage ( new HttpMethod ( method ), \"/api/Album/\" ); // Act var response = await _client . SendAsync ( request ); // Assert response . EnsureSuccessStatusCode (); Assert . Equal ( HttpStatusCode . OK , response . StatusCode ); } [Theory] [InlineData(\"GET\", 1)] public async Task AlbumGetTest ( string method , int? id = null ) { // Arrange var request = new HttpRequestMessage ( new HttpMethod ( method ), $\"/api/Album/{id}\" ); // Act var response = await _client . SendAsync ( request ); // Assert response . EnsureSuccessStatusCode (); Assert . Equal ( HttpStatusCode . OK , response . StatusCode ); } CHANGE YOUR COONECTIONSTRING TO MATCH ONE THAT CONNECTS TO CHINOOK DATABASE \u00b6 Located in the appsettings.json file { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" } OPEN TEST EXPLORER AND BUILD TO SEE TESTS IN YOUR SOLUTION \u00b6 Note -- You may need to rebuild your project for the Test Explorer to find the tests RUN TESTS \u00b6","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/integration-testing/#creating-and-using-integrating-testing-for-your-api","text":"","title":"Creating and using Integrating Testing for your API"},{"location":"Testing%20Your%20AP/integration-testing/#open-solution-before-paging-module-in-the-testing-module-for-integration-testing","text":"\\aspnet-7-web-api-workshop\\module-2\\02-02 Creating and using Integrating Testing for your Web API\\testing","title":"OPEN SOLUTION (BEFORE PAGING MODULE) IN THE TESTING MODULE FOR INTEGRATION TESTING"},{"location":"Testing%20Your%20AP/integration-testing/#explorer-the-chinookaspnetwebapiintegrationtest-project-and-understand-the-tests","text":"This will give you a good insight into how to create unit tests for different components of your Web API","title":"EXPLORER THE ChinookASPNETWebAPI.IntegrationTest PROJECT AND UNDERSTAND THE TESTS"},{"location":"Testing%20Your%20AP/integration-testing/#modify-the-program-file-in-api-project","text":"If you get an error that testhost.deps.json is missing then add the following to your API project's Program.cs public partial class Program { }","title":"MODIFY THE PROGRAM FILE IN API PROJECT"},{"location":"Testing%20Your%20AP/integration-testing/#create-additional-integration-tests","text":"Using the existing integration tests for the Album as a guide, build more integration tests for some of the other models in the solution. [Theory] [InlineData(\"GET\")] public async void AlbumGetAllTest ( string method ) { // Arrange var request = new HttpRequestMessage ( new HttpMethod ( method ), \"/api/Album/\" ); // Act var response = await _client . SendAsync ( request ); // Assert response . EnsureSuccessStatusCode (); Assert . Equal ( HttpStatusCode . OK , response . StatusCode ); } [Theory] [InlineData(\"GET\", 1)] public async Task AlbumGetTest ( string method , int? id = null ) { // Arrange var request = new HttpRequestMessage ( new HttpMethod ( method ), $\"/api/Album/{id}\" ); // Act var response = await _client . SendAsync ( request ); // Assert response . EnsureSuccessStatusCode (); Assert . Equal ( HttpStatusCode . OK , response . StatusCode ); }","title":"CREATE ADDITIONAL INTEGRATION TESTS"},{"location":"Testing%20Your%20AP/integration-testing/#change-your-coonectionstring-to-match-one-that-connects-to-chinook-database","text":"Located in the appsettings.json file { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" }","title":"CHANGE YOUR COONECTIONSTRING TO MATCH ONE THAT CONNECTS TO CHINOOK DATABASE"},{"location":"Testing%20Your%20AP/integration-testing/#open-test-explorer-and-build-to-see-tests-in-your-solution","text":"Note -- You may need to rebuild your project for the Test Explorer to find the tests","title":"OPEN TEST EXPLORER AND BUILD TO SEE TESTS IN YOUR SOLUTION"},{"location":"Testing%20Your%20AP/integration-testing/#run-tests","text":"","title":"RUN TESTS"},{"location":"Testing%20Your%20AP/unit-testing/","text":"Creating and using Unit Testing for your API \u00b6 OPEN SOLUTION (BEFORE PAGING MODULE) IN THE TESTING MODULE FOR UNIT TESTING \u00b6 \\aspnet-7-web-api-workshop\\module-2\\02-01 Creating and using Unit Testing for your Web API\\testing EXPLORER THE ChinookASPNETWebAPI.UnitTest PROJECT AND UNDERSTAND THE TESTS \u00b6 This will give you a good insight into how to create unit tests for different components of your Web API CREATE ADDITIONAL UNIT TESTS FOR DATA REPOSITORIES \u00b6 Using the existing tests for the Album and Artist Data Repositories as a guide, build unit tests for some of the other models in the solution. [Fact] public async Task AlbumGetAll () { // Arrange // Act var albums = await _repo . GetAll (); // Assert Assert . True ( albums . Count > 1 , \"The number of albums was not greater than 1\" ); } [Fact] public void AlbumGetOne () { // Arrange var id = 1 ; // Act var album = _repo . GetById ( id ); // Assert Assert . Equal ( id , album . Id ); } CREATE ADDITIONAL UNIT TESTS FOR SUPERVISOR \u00b6 Using the existing tests for the Album and Artist Supervisor as a guide, build unit tests for some of the other models in the solution. [Fact] public async Task GetAllAlbum_GivenTwoAlbumsInTheDatabase_ReturnsBoth () { var album1 = new Album { Id = 12 }; var album2 = new Album { Id = 123 }; // Arrange _context . Albums . Add ( album1 ); _context . Albums . Add ( album2 ); _context . SaveChanges (); // Act var albums = ( await _super . GetAllAlbum ()). ToList (); // Assert albums . Count . Should (). Be ( 2 ); albums . Should (). Contain ( x => x . Id == 12 ); albums . Should (). Contain ( x => x . Id == 123 ); } [Fact] public void GetAlbumByID_MatchingAlbumInDB_ReturnsIt () { // Arrange var albumId = 1 ; var artistId = 1234 ; // We are currently required to care about an Artist ID because the convert part of album specifically references the artist repository as well. _context . Artists . Add ( new Artist () { Id = artistId }); _context . Albums . Add ( new Album () { Id = 1 , ArtistId = 1234 }); _context . SaveChanges (); // Act var album = _super . GetAlbumById ( albumId ); // Assert album . Id . Should (). Be ( 1 ); } CREATE ADDITIONAL UNIT TESTS FOR VALIDATORS \u00b6 Using the existing tests for the Album Validator as a guide, build unit tests for some of the other models in the solution. [Fact] public void Should_have_error_when_Name_is_null () { // Arrange var model = new AlbumApiModel { Title = null }; // Act var result = _validator . TestValidate ( model ); // Assert result . ShouldHaveValidationErrorFor ( album => album . Title ); } [Fact] public void Should_not_have_error_when_name_is_specified () { // Arrange var model = new AlbumApiModel { Title = \"Abbey Road\" }; // Act var result = _validator . TestValidate ( model ); // Assert result . ShouldNotHaveValidationErrorFor ( album => album . Title ); } CHANGE YOUR COONECTIONSTRING TO MATCH ONE THAT CONNECTS TO CHINOOK DATABASE \u00b6 Located in the appsettings.json file { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" } OPEN TEST EXPLORER AND BUILD TO SEE TESTS IN YOUR SOLUTION \u00b6 Note -- You may need to rebuild your project for the Test Explorer to find the tests RUN TESTS \u00b6","title":"Creating and using Unit Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/#creating-and-using-unit-testing-for-your-api","text":"","title":"Creating and using Unit Testing for your API"},{"location":"Testing%20Your%20AP/unit-testing/#open-solution-before-paging-module-in-the-testing-module-for-unit-testing","text":"\\aspnet-7-web-api-workshop\\module-2\\02-01 Creating and using Unit Testing for your Web API\\testing","title":"OPEN SOLUTION (BEFORE PAGING MODULE) IN THE TESTING MODULE FOR UNIT TESTING"},{"location":"Testing%20Your%20AP/unit-testing/#explorer-the-chinookaspnetwebapiunittest-project-and-understand-the-tests","text":"This will give you a good insight into how to create unit tests for different components of your Web API","title":"EXPLORER THE ChinookASPNETWebAPI.UnitTest PROJECT AND UNDERSTAND THE TESTS"},{"location":"Testing%20Your%20AP/unit-testing/#create-additional-unit-tests-for-data-repositories","text":"Using the existing tests for the Album and Artist Data Repositories as a guide, build unit tests for some of the other models in the solution. [Fact] public async Task AlbumGetAll () { // Arrange // Act var albums = await _repo . GetAll (); // Assert Assert . True ( albums . Count > 1 , \"The number of albums was not greater than 1\" ); } [Fact] public void AlbumGetOne () { // Arrange var id = 1 ; // Act var album = _repo . GetById ( id ); // Assert Assert . Equal ( id , album . Id ); }","title":"CREATE ADDITIONAL UNIT TESTS FOR DATA REPOSITORIES"},{"location":"Testing%20Your%20AP/unit-testing/#create-additional-unit-tests-for-supervisor","text":"Using the existing tests for the Album and Artist Supervisor as a guide, build unit tests for some of the other models in the solution. [Fact] public async Task GetAllAlbum_GivenTwoAlbumsInTheDatabase_ReturnsBoth () { var album1 = new Album { Id = 12 }; var album2 = new Album { Id = 123 }; // Arrange _context . Albums . Add ( album1 ); _context . Albums . Add ( album2 ); _context . SaveChanges (); // Act var albums = ( await _super . GetAllAlbum ()). ToList (); // Assert albums . Count . Should (). Be ( 2 ); albums . Should (). Contain ( x => x . Id == 12 ); albums . Should (). Contain ( x => x . Id == 123 ); } [Fact] public void GetAlbumByID_MatchingAlbumInDB_ReturnsIt () { // Arrange var albumId = 1 ; var artistId = 1234 ; // We are currently required to care about an Artist ID because the convert part of album specifically references the artist repository as well. _context . Artists . Add ( new Artist () { Id = artistId }); _context . Albums . Add ( new Album () { Id = 1 , ArtistId = 1234 }); _context . SaveChanges (); // Act var album = _super . GetAlbumById ( albumId ); // Assert album . Id . Should (). Be ( 1 ); }","title":"CREATE ADDITIONAL UNIT TESTS FOR SUPERVISOR"},{"location":"Testing%20Your%20AP/unit-testing/#create-additional-unit-tests-for-validators","text":"Using the existing tests for the Album Validator as a guide, build unit tests for some of the other models in the solution. [Fact] public void Should_have_error_when_Name_is_null () { // Arrange var model = new AlbumApiModel { Title = null }; // Act var result = _validator . TestValidate ( model ); // Assert result . ShouldHaveValidationErrorFor ( album => album . Title ); } [Fact] public void Should_not_have_error_when_name_is_specified () { // Arrange var model = new AlbumApiModel { Title = \"Abbey Road\" }; // Act var result = _validator . TestValidate ( model ); // Assert result . ShouldNotHaveValidationErrorFor ( album => album . Title ); }","title":"CREATE ADDITIONAL UNIT TESTS FOR VALIDATORS"},{"location":"Testing%20Your%20AP/unit-testing/#change-your-coonectionstring-to-match-one-that-connects-to-chinook-database","text":"Located in the appsettings.json file { \"Logging\" : { \"LogLevel\" : { \"Default\" : \"Information\" , \"Microsoft\" : \"Warning\" , \"Microsoft.Hosting.Lifetime\" : \"Information\" } }, \"ConnectionStrings\" : { \"ChinookDbWindows\" : \"Server=.;Database=Chinook;Trusted_Connection=True;TrustServerCertificate=True;Application Name=Chinook7WebAPI\" , \"ChinookDbDocker\" : \"Server=localhost,1433;Database=Chinook;User=sa;Password=P@55w0rd;Trusted_Connection=False;Application Name=ChinookASPNETCoreAPINTier\" }, \"AllowedHosts\" : \"*\" }","title":"CHANGE YOUR COONECTIONSTRING TO MATCH ONE THAT CONNECTS TO CHINOOK DATABASE"},{"location":"Testing%20Your%20AP/unit-testing/#open-test-explorer-and-build-to-see-tests-in-your-solution","text":"Note -- You may need to rebuild your project for the Test Explorer to find the tests","title":"OPEN TEST EXPLORER AND BUILD TO SEE TESTS IN YOUR SOLUTION"},{"location":"Testing%20Your%20AP/unit-testing/#run-tests","text":"","title":"RUN TESTS"}]}